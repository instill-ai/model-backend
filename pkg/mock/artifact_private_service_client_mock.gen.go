// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_artifactv1alpha "github.com/instill-ai/protogen-go/artifact/artifact/v1alpha"
	grpc "google.golang.org/grpc"
)

// ArtifactPrivateServiceClientMock implements mm_artifactv1alpha.ArtifactPrivateServiceClient
type ArtifactPrivateServiceClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateRepositoryTag          func(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption) (cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse, err error)
	funcCreateRepositoryTagOrigin    string
	inspectFuncCreateRepositoryTag   func(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption)
	afterCreateRepositoryTagCounter  uint64
	beforeCreateRepositoryTagCounter uint64
	CreateRepositoryTagMock          mArtifactPrivateServiceClientMockCreateRepositoryTag

	funcDeleteRepositoryTag          func(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption) (dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse, err error)
	funcDeleteRepositoryTagOrigin    string
	inspectFuncDeleteRepositoryTag   func(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption)
	afterDeleteRepositoryTagCounter  uint64
	beforeDeleteRepositoryTagCounter uint64
	DeleteRepositoryTagMock          mArtifactPrivateServiceClientMockDeleteRepositoryTag

	funcGetChatFile          func(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetChatFileResponse, err error)
	funcGetChatFileOrigin    string
	inspectFuncGetChatFile   func(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption)
	afterGetChatFileCounter  uint64
	beforeGetChatFileCounter uint64
	GetChatFileMock          mArtifactPrivateServiceClientMockGetChatFile

	funcGetFileAsMarkdown          func(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse, err error)
	funcGetFileAsMarkdownOrigin    string
	inspectFuncGetFileAsMarkdown   func(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption)
	afterGetFileAsMarkdownCounter  uint64
	beforeGetFileAsMarkdownCounter uint64
	GetFileAsMarkdownMock          mArtifactPrivateServiceClientMockGetFileAsMarkdown

	funcGetObject          func(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectResponse, err error)
	funcGetObjectOrigin    string
	inspectFuncGetObject   func(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption)
	afterGetObjectCounter  uint64
	beforeGetObjectCounter uint64
	GetObjectMock          mArtifactPrivateServiceClientMockGetObject

	funcGetObjectURL          func(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectURLResponse, err error)
	funcGetObjectURLOrigin    string
	inspectFuncGetObjectURL   func(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption)
	afterGetObjectURLCounter  uint64
	beforeGetObjectURLCounter uint64
	GetObjectURLMock          mArtifactPrivateServiceClientMockGetObjectURL

	funcGetRepositoryTag          func(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetRepositoryTagResponse, err error)
	funcGetRepositoryTagOrigin    string
	inspectFuncGetRepositoryTag   func(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption)
	afterGetRepositoryTagCounter  uint64
	beforeGetRepositoryTagCounter uint64
	GetRepositoryTagMock          mArtifactPrivateServiceClientMockGetRepositoryTag

	funcListRepositoryTags          func(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption) (lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse, err error)
	funcListRepositoryTagsOrigin    string
	inspectFuncListRepositoryTags   func(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption)
	afterListRepositoryTagsCounter  uint64
	beforeListRepositoryTagsCounter uint64
	ListRepositoryTagsMock          mArtifactPrivateServiceClientMockListRepositoryTags

	funcUpdateObject          func(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption) (up1 *mm_artifactv1alpha.UpdateObjectResponse, err error)
	funcUpdateObjectOrigin    string
	inspectFuncUpdateObject   func(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption)
	afterUpdateObjectCounter  uint64
	beforeUpdateObjectCounter uint64
	UpdateObjectMock          mArtifactPrivateServiceClientMockUpdateObject
}

// NewArtifactPrivateServiceClientMock returns a mock for mm_artifactv1alpha.ArtifactPrivateServiceClient
func NewArtifactPrivateServiceClientMock(t minimock.Tester) *ArtifactPrivateServiceClientMock {
	m := &ArtifactPrivateServiceClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateRepositoryTagMock = mArtifactPrivateServiceClientMockCreateRepositoryTag{mock: m}
	m.CreateRepositoryTagMock.callArgs = []*ArtifactPrivateServiceClientMockCreateRepositoryTagParams{}

	m.DeleteRepositoryTagMock = mArtifactPrivateServiceClientMockDeleteRepositoryTag{mock: m}
	m.DeleteRepositoryTagMock.callArgs = []*ArtifactPrivateServiceClientMockDeleteRepositoryTagParams{}

	m.GetChatFileMock = mArtifactPrivateServiceClientMockGetChatFile{mock: m}
	m.GetChatFileMock.callArgs = []*ArtifactPrivateServiceClientMockGetChatFileParams{}

	m.GetFileAsMarkdownMock = mArtifactPrivateServiceClientMockGetFileAsMarkdown{mock: m}
	m.GetFileAsMarkdownMock.callArgs = []*ArtifactPrivateServiceClientMockGetFileAsMarkdownParams{}

	m.GetObjectMock = mArtifactPrivateServiceClientMockGetObject{mock: m}
	m.GetObjectMock.callArgs = []*ArtifactPrivateServiceClientMockGetObjectParams{}

	m.GetObjectURLMock = mArtifactPrivateServiceClientMockGetObjectURL{mock: m}
	m.GetObjectURLMock.callArgs = []*ArtifactPrivateServiceClientMockGetObjectURLParams{}

	m.GetRepositoryTagMock = mArtifactPrivateServiceClientMockGetRepositoryTag{mock: m}
	m.GetRepositoryTagMock.callArgs = []*ArtifactPrivateServiceClientMockGetRepositoryTagParams{}

	m.ListRepositoryTagsMock = mArtifactPrivateServiceClientMockListRepositoryTags{mock: m}
	m.ListRepositoryTagsMock.callArgs = []*ArtifactPrivateServiceClientMockListRepositoryTagsParams{}

	m.UpdateObjectMock = mArtifactPrivateServiceClientMockUpdateObject{mock: m}
	m.UpdateObjectMock.callArgs = []*ArtifactPrivateServiceClientMockUpdateObjectParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mArtifactPrivateServiceClientMockCreateRepositoryTag struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation
	expectations       []*ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation

	callArgs []*ArtifactPrivateServiceClientMockCreateRepositoryTagParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation specifies expectation struct of the ArtifactPrivateServiceClient.CreateRepositoryTag
type ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockCreateRepositoryTagParams
	paramPtrs          *ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockCreateRepositoryTagExpectationOrigins
	results            *ArtifactPrivateServiceClientMockCreateRepositoryTagResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockCreateRepositoryTagParams contains parameters of the ArtifactPrivateServiceClient.CreateRepositoryTag
type ArtifactPrivateServiceClientMockCreateRepositoryTagParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.CreateRepositoryTagRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.CreateRepositoryTag
type ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.CreateRepositoryTagRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockCreateRepositoryTagResults contains results of the ArtifactPrivateServiceClient.CreateRepositoryTag
type ArtifactPrivateServiceClientMockCreateRepositoryTagResults struct {
	cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse
	err error
}

// ArtifactPrivateServiceClientMockCreateRepositoryTagOrigins contains origins of expectations of the ArtifactPrivateServiceClient.CreateRepositoryTag
type ArtifactPrivateServiceClientMockCreateRepositoryTagExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Optional() *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	mmCreateRepositoryTag.optional = true
	return mmCreateRepositoryTag
}

// Expect sets up expected params for ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Expect(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	if mmCreateRepositoryTag.defaultExpectation == nil {
		mmCreateRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{}
	}

	if mmCreateRepositoryTag.defaultExpectation.paramPtrs != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by ExpectParams functions")
	}

	mmCreateRepositoryTag.defaultExpectation.params = &ArtifactPrivateServiceClientMockCreateRepositoryTagParams{ctx, in, opts}
	mmCreateRepositoryTag.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateRepositoryTag.expectations {
		if minimock.Equal(e.params, mmCreateRepositoryTag.defaultExpectation.params) {
			mmCreateRepositoryTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateRepositoryTag.defaultExpectation.params)
		}
	}

	return mmCreateRepositoryTag
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	if mmCreateRepositoryTag.defaultExpectation == nil {
		mmCreateRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{}
	}

	if mmCreateRepositoryTag.defaultExpectation.params != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Expect")
	}

	if mmCreateRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmCreateRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs{}
	}
	mmCreateRepositoryTag.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateRepositoryTag.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateRepositoryTag
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) ExpectInParam2(in *mm_artifactv1alpha.CreateRepositoryTagRequest) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	if mmCreateRepositoryTag.defaultExpectation == nil {
		mmCreateRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{}
	}

	if mmCreateRepositoryTag.defaultExpectation.params != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Expect")
	}

	if mmCreateRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmCreateRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs{}
	}
	mmCreateRepositoryTag.defaultExpectation.paramPtrs.in = &in
	mmCreateRepositoryTag.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmCreateRepositoryTag
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	if mmCreateRepositoryTag.defaultExpectation == nil {
		mmCreateRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{}
	}

	if mmCreateRepositoryTag.defaultExpectation.params != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Expect")
	}

	if mmCreateRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmCreateRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockCreateRepositoryTagParamPtrs{}
	}
	mmCreateRepositoryTag.defaultExpectation.paramPtrs.opts = &opts
	mmCreateRepositoryTag.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmCreateRepositoryTag
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if mmCreateRepositoryTag.mock.inspectFuncCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.CreateRepositoryTag")
	}

	mmCreateRepositoryTag.mock.inspectFuncCreateRepositoryTag = f

	return mmCreateRepositoryTag
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.CreateRepositoryTag
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Return(cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	if mmCreateRepositoryTag.defaultExpectation == nil {
		mmCreateRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{mock: mmCreateRepositoryTag.mock}
	}
	mmCreateRepositoryTag.defaultExpectation.results = &ArtifactPrivateServiceClientMockCreateRepositoryTagResults{cp1, err}
	mmCreateRepositoryTag.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateRepositoryTag.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.CreateRepositoryTag method
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Set(f func(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption) (cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmCreateRepositoryTag.defaultExpectation != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.CreateRepositoryTag method")
	}

	if len(mmCreateRepositoryTag.expectations) > 0 {
		mmCreateRepositoryTag.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.CreateRepositoryTag method")
	}

	mmCreateRepositoryTag.mock.funcCreateRepositoryTag = f
	mmCreateRepositoryTag.mock.funcCreateRepositoryTagOrigin = minimock.CallerInfo(1)
	return mmCreateRepositoryTag.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.CreateRepositoryTag which will trigger the result defined by the following
// Then helper
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) When(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation {
	if mmCreateRepositoryTag.mock.funcCreateRepositoryTag != nil {
		mmCreateRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.CreateRepositoryTag mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation{
		mock:               mmCreateRepositoryTag.mock,
		params:             &ArtifactPrivateServiceClientMockCreateRepositoryTagParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockCreateRepositoryTagExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateRepositoryTag.expectations = append(mmCreateRepositoryTag.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.CreateRepositoryTag return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockCreateRepositoryTagExpectation) Then(cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockCreateRepositoryTagResults{cp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.CreateRepositoryTag should be invoked
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Times(n uint64) *mArtifactPrivateServiceClientMockCreateRepositoryTag {
	if n == 0 {
		mmCreateRepositoryTag.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.CreateRepositoryTag mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateRepositoryTag.expectedInvocations, n)
	mmCreateRepositoryTag.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateRepositoryTag
}

func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) invocationsDone() bool {
	if len(mmCreateRepositoryTag.expectations) == 0 && mmCreateRepositoryTag.defaultExpectation == nil && mmCreateRepositoryTag.mock.funcCreateRepositoryTag == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateRepositoryTag.mock.afterCreateRepositoryTagCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateRepositoryTag.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateRepositoryTag implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmCreateRepositoryTag *ArtifactPrivateServiceClientMock) CreateRepositoryTag(ctx context.Context, in *mm_artifactv1alpha.CreateRepositoryTagRequest, opts ...grpc.CallOption) (cp1 *mm_artifactv1alpha.CreateRepositoryTagResponse, err error) {
	mm_atomic.AddUint64(&mmCreateRepositoryTag.beforeCreateRepositoryTagCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateRepositoryTag.afterCreateRepositoryTagCounter, 1)

	mmCreateRepositoryTag.t.Helper()

	if mmCreateRepositoryTag.inspectFuncCreateRepositoryTag != nil {
		mmCreateRepositoryTag.inspectFuncCreateRepositoryTag(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockCreateRepositoryTagParams{ctx, in, opts}

	// Record call args
	mmCreateRepositoryTag.CreateRepositoryTagMock.mutex.Lock()
	mmCreateRepositoryTag.CreateRepositoryTagMock.callArgs = append(mmCreateRepositoryTag.CreateRepositoryTagMock.callArgs, &mm_params)
	mmCreateRepositoryTag.CreateRepositoryTagMock.mutex.Unlock()

	for _, e := range mmCreateRepositoryTag.CreateRepositoryTagMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.params
		mm_want_ptrs := mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockCreateRepositoryTagParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.CreateRepositoryTag got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCreateRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.CreateRepositoryTag got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmCreateRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.CreateRepositoryTag got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.CreateRepositoryTag got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateRepositoryTag.CreateRepositoryTagMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateRepositoryTag.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.CreateRepositoryTag")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreateRepositoryTag.funcCreateRepositoryTag != nil {
		return mmCreateRepositoryTag.funcCreateRepositoryTag(ctx, in, opts...)
	}
	mmCreateRepositoryTag.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.CreateRepositoryTag. %v %v %v", ctx, in, opts)
	return
}

// CreateRepositoryTagAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.CreateRepositoryTag invocations
func (mmCreateRepositoryTag *ArtifactPrivateServiceClientMock) CreateRepositoryTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRepositoryTag.afterCreateRepositoryTagCounter)
}

// CreateRepositoryTagBeforeCounter returns a count of ArtifactPrivateServiceClientMock.CreateRepositoryTag invocations
func (mmCreateRepositoryTag *ArtifactPrivateServiceClientMock) CreateRepositoryTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRepositoryTag.beforeCreateRepositoryTagCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.CreateRepositoryTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateRepositoryTag *mArtifactPrivateServiceClientMockCreateRepositoryTag) Calls() []*ArtifactPrivateServiceClientMockCreateRepositoryTagParams {
	mmCreateRepositoryTag.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockCreateRepositoryTagParams, len(mmCreateRepositoryTag.callArgs))
	copy(argCopy, mmCreateRepositoryTag.callArgs)

	mmCreateRepositoryTag.mutex.RUnlock()

	return argCopy
}

// MinimockCreateRepositoryTagDone returns true if the count of the CreateRepositoryTag invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockCreateRepositoryTagDone() bool {
	if m.CreateRepositoryTagMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateRepositoryTagMock.invocationsDone()
}

// MinimockCreateRepositoryTagInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockCreateRepositoryTagInspect() {
	for _, e := range m.CreateRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.CreateRepositoryTag at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateRepositoryTagCounter := mm_atomic.LoadUint64(&m.afterCreateRepositoryTagCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateRepositoryTagMock.defaultExpectation != nil && afterCreateRepositoryTagCounter < 1 {
		if m.CreateRepositoryTagMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.CreateRepositoryTag at\n%s", m.CreateRepositoryTagMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.CreateRepositoryTag at\n%s with params: %#v", m.CreateRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *m.CreateRepositoryTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateRepositoryTag != nil && afterCreateRepositoryTagCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.CreateRepositoryTag at\n%s", m.funcCreateRepositoryTagOrigin)
	}

	if !m.CreateRepositoryTagMock.invocationsDone() && afterCreateRepositoryTagCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.CreateRepositoryTag at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateRepositoryTagMock.expectedInvocations), m.CreateRepositoryTagMock.expectedInvocationsOrigin, afterCreateRepositoryTagCounter)
	}
}

type mArtifactPrivateServiceClientMockDeleteRepositoryTag struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation
	expectations       []*ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation

	callArgs []*ArtifactPrivateServiceClientMockDeleteRepositoryTagParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation specifies expectation struct of the ArtifactPrivateServiceClient.DeleteRepositoryTag
type ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockDeleteRepositoryTagParams
	paramPtrs          *ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectationOrigins
	results            *ArtifactPrivateServiceClientMockDeleteRepositoryTagResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockDeleteRepositoryTagParams contains parameters of the ArtifactPrivateServiceClient.DeleteRepositoryTag
type ArtifactPrivateServiceClientMockDeleteRepositoryTagParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.DeleteRepositoryTagRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.DeleteRepositoryTag
type ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.DeleteRepositoryTagRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockDeleteRepositoryTagResults contains results of the ArtifactPrivateServiceClient.DeleteRepositoryTag
type ArtifactPrivateServiceClientMockDeleteRepositoryTagResults struct {
	dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse
	err error
}

// ArtifactPrivateServiceClientMockDeleteRepositoryTagOrigins contains origins of expectations of the ArtifactPrivateServiceClient.DeleteRepositoryTag
type ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Optional() *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	mmDeleteRepositoryTag.optional = true
	return mmDeleteRepositoryTag
}

// Expect sets up expected params for ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Expect(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	if mmDeleteRepositoryTag.defaultExpectation == nil {
		mmDeleteRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{}
	}

	if mmDeleteRepositoryTag.defaultExpectation.paramPtrs != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by ExpectParams functions")
	}

	mmDeleteRepositoryTag.defaultExpectation.params = &ArtifactPrivateServiceClientMockDeleteRepositoryTagParams{ctx, in, opts}
	mmDeleteRepositoryTag.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteRepositoryTag.expectations {
		if minimock.Equal(e.params, mmDeleteRepositoryTag.defaultExpectation.params) {
			mmDeleteRepositoryTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteRepositoryTag.defaultExpectation.params)
		}
	}

	return mmDeleteRepositoryTag
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	if mmDeleteRepositoryTag.defaultExpectation == nil {
		mmDeleteRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{}
	}

	if mmDeleteRepositoryTag.defaultExpectation.params != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Expect")
	}

	if mmDeleteRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmDeleteRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs{}
	}
	mmDeleteRepositoryTag.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteRepositoryTag.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteRepositoryTag
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) ExpectInParam2(in *mm_artifactv1alpha.DeleteRepositoryTagRequest) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	if mmDeleteRepositoryTag.defaultExpectation == nil {
		mmDeleteRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{}
	}

	if mmDeleteRepositoryTag.defaultExpectation.params != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Expect")
	}

	if mmDeleteRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmDeleteRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs{}
	}
	mmDeleteRepositoryTag.defaultExpectation.paramPtrs.in = &in
	mmDeleteRepositoryTag.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmDeleteRepositoryTag
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	if mmDeleteRepositoryTag.defaultExpectation == nil {
		mmDeleteRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{}
	}

	if mmDeleteRepositoryTag.defaultExpectation.params != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Expect")
	}

	if mmDeleteRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmDeleteRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockDeleteRepositoryTagParamPtrs{}
	}
	mmDeleteRepositoryTag.defaultExpectation.paramPtrs.opts = &opts
	mmDeleteRepositoryTag.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmDeleteRepositoryTag
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if mmDeleteRepositoryTag.mock.inspectFuncDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.DeleteRepositoryTag")
	}

	mmDeleteRepositoryTag.mock.inspectFuncDeleteRepositoryTag = f

	return mmDeleteRepositoryTag
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.DeleteRepositoryTag
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Return(dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	if mmDeleteRepositoryTag.defaultExpectation == nil {
		mmDeleteRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{mock: mmDeleteRepositoryTag.mock}
	}
	mmDeleteRepositoryTag.defaultExpectation.results = &ArtifactPrivateServiceClientMockDeleteRepositoryTagResults{dp1, err}
	mmDeleteRepositoryTag.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteRepositoryTag.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.DeleteRepositoryTag method
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Set(f func(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption) (dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmDeleteRepositoryTag.defaultExpectation != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.DeleteRepositoryTag method")
	}

	if len(mmDeleteRepositoryTag.expectations) > 0 {
		mmDeleteRepositoryTag.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.DeleteRepositoryTag method")
	}

	mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag = f
	mmDeleteRepositoryTag.mock.funcDeleteRepositoryTagOrigin = minimock.CallerInfo(1)
	return mmDeleteRepositoryTag.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.DeleteRepositoryTag which will trigger the result defined by the following
// Then helper
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) When(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation {
	if mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation{
		mock:               mmDeleteRepositoryTag.mock,
		params:             &ArtifactPrivateServiceClientMockDeleteRepositoryTagParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteRepositoryTag.expectations = append(mmDeleteRepositoryTag.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.DeleteRepositoryTag return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockDeleteRepositoryTagExpectation) Then(dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockDeleteRepositoryTagResults{dp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.DeleteRepositoryTag should be invoked
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Times(n uint64) *mArtifactPrivateServiceClientMockDeleteRepositoryTag {
	if n == 0 {
		mmDeleteRepositoryTag.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.DeleteRepositoryTag mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteRepositoryTag.expectedInvocations, n)
	mmDeleteRepositoryTag.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteRepositoryTag
}

func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) invocationsDone() bool {
	if len(mmDeleteRepositoryTag.expectations) == 0 && mmDeleteRepositoryTag.defaultExpectation == nil && mmDeleteRepositoryTag.mock.funcDeleteRepositoryTag == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteRepositoryTag.mock.afterDeleteRepositoryTagCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteRepositoryTag.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteRepositoryTag implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmDeleteRepositoryTag *ArtifactPrivateServiceClientMock) DeleteRepositoryTag(ctx context.Context, in *mm_artifactv1alpha.DeleteRepositoryTagRequest, opts ...grpc.CallOption) (dp1 *mm_artifactv1alpha.DeleteRepositoryTagResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteRepositoryTag.beforeDeleteRepositoryTagCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteRepositoryTag.afterDeleteRepositoryTagCounter, 1)

	mmDeleteRepositoryTag.t.Helper()

	if mmDeleteRepositoryTag.inspectFuncDeleteRepositoryTag != nil {
		mmDeleteRepositoryTag.inspectFuncDeleteRepositoryTag(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockDeleteRepositoryTagParams{ctx, in, opts}

	// Record call args
	mmDeleteRepositoryTag.DeleteRepositoryTagMock.mutex.Lock()
	mmDeleteRepositoryTag.DeleteRepositoryTagMock.callArgs = append(mmDeleteRepositoryTag.DeleteRepositoryTagMock.callArgs, &mm_params)
	mmDeleteRepositoryTag.DeleteRepositoryTagMock.mutex.Unlock()

	for _, e := range mmDeleteRepositoryTag.DeleteRepositoryTagMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp1, e.results.err
		}
	}

	if mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockDeleteRepositoryTagParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmDeleteRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmDeleteRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.DeleteRepositoryTag got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteRepositoryTag.DeleteRepositoryTagMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteRepositoryTag.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.DeleteRepositoryTag")
		}
		return (*mm_results).dp1, (*mm_results).err
	}
	if mmDeleteRepositoryTag.funcDeleteRepositoryTag != nil {
		return mmDeleteRepositoryTag.funcDeleteRepositoryTag(ctx, in, opts...)
	}
	mmDeleteRepositoryTag.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag. %v %v %v", ctx, in, opts)
	return
}

// DeleteRepositoryTagAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.DeleteRepositoryTag invocations
func (mmDeleteRepositoryTag *ArtifactPrivateServiceClientMock) DeleteRepositoryTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRepositoryTag.afterDeleteRepositoryTagCounter)
}

// DeleteRepositoryTagBeforeCounter returns a count of ArtifactPrivateServiceClientMock.DeleteRepositoryTag invocations
func (mmDeleteRepositoryTag *ArtifactPrivateServiceClientMock) DeleteRepositoryTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRepositoryTag.beforeDeleteRepositoryTagCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteRepositoryTag *mArtifactPrivateServiceClientMockDeleteRepositoryTag) Calls() []*ArtifactPrivateServiceClientMockDeleteRepositoryTagParams {
	mmDeleteRepositoryTag.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockDeleteRepositoryTagParams, len(mmDeleteRepositoryTag.callArgs))
	copy(argCopy, mmDeleteRepositoryTag.callArgs)

	mmDeleteRepositoryTag.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteRepositoryTagDone returns true if the count of the DeleteRepositoryTag invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockDeleteRepositoryTagDone() bool {
	if m.DeleteRepositoryTagMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteRepositoryTagMock.invocationsDone()
}

// MinimockDeleteRepositoryTagInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockDeleteRepositoryTagInspect() {
	for _, e := range m.DeleteRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteRepositoryTagCounter := mm_atomic.LoadUint64(&m.afterDeleteRepositoryTagCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteRepositoryTagMock.defaultExpectation != nil && afterDeleteRepositoryTagCounter < 1 {
		if m.DeleteRepositoryTagMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag at\n%s", m.DeleteRepositoryTagMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag at\n%s with params: %#v", m.DeleteRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *m.DeleteRepositoryTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteRepositoryTag != nil && afterDeleteRepositoryTagCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.DeleteRepositoryTag at\n%s", m.funcDeleteRepositoryTagOrigin)
	}

	if !m.DeleteRepositoryTagMock.invocationsDone() && afterDeleteRepositoryTagCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.DeleteRepositoryTag at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteRepositoryTagMock.expectedInvocations), m.DeleteRepositoryTagMock.expectedInvocationsOrigin, afterDeleteRepositoryTagCounter)
	}
}

type mArtifactPrivateServiceClientMockGetChatFile struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockGetChatFileExpectation
	expectations       []*ArtifactPrivateServiceClientMockGetChatFileExpectation

	callArgs []*ArtifactPrivateServiceClientMockGetChatFileParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockGetChatFileExpectation specifies expectation struct of the ArtifactPrivateServiceClient.GetChatFile
type ArtifactPrivateServiceClientMockGetChatFileExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockGetChatFileParams
	paramPtrs          *ArtifactPrivateServiceClientMockGetChatFileParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockGetChatFileExpectationOrigins
	results            *ArtifactPrivateServiceClientMockGetChatFileResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockGetChatFileParams contains parameters of the ArtifactPrivateServiceClient.GetChatFile
type ArtifactPrivateServiceClientMockGetChatFileParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.GetChatFileRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetChatFileParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.GetChatFile
type ArtifactPrivateServiceClientMockGetChatFileParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.GetChatFileRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetChatFileResults contains results of the ArtifactPrivateServiceClient.GetChatFile
type ArtifactPrivateServiceClientMockGetChatFileResults struct {
	gp1 *mm_artifactv1alpha.GetChatFileResponse
	err error
}

// ArtifactPrivateServiceClientMockGetChatFileOrigins contains origins of expectations of the ArtifactPrivateServiceClient.GetChatFile
type ArtifactPrivateServiceClientMockGetChatFileExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Optional() *mArtifactPrivateServiceClientMockGetChatFile {
	mmGetChatFile.optional = true
	return mmGetChatFile
}

// Expect sets up expected params for ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Expect(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetChatFile {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	if mmGetChatFile.defaultExpectation == nil {
		mmGetChatFile.defaultExpectation = &ArtifactPrivateServiceClientMockGetChatFileExpectation{}
	}

	if mmGetChatFile.defaultExpectation.paramPtrs != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by ExpectParams functions")
	}

	mmGetChatFile.defaultExpectation.params = &ArtifactPrivateServiceClientMockGetChatFileParams{ctx, in, opts}
	mmGetChatFile.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChatFile.expectations {
		if minimock.Equal(e.params, mmGetChatFile.defaultExpectation.params) {
			mmGetChatFile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatFile.defaultExpectation.params)
		}
	}

	return mmGetChatFile
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockGetChatFile {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	if mmGetChatFile.defaultExpectation == nil {
		mmGetChatFile.defaultExpectation = &ArtifactPrivateServiceClientMockGetChatFileExpectation{}
	}

	if mmGetChatFile.defaultExpectation.params != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Expect")
	}

	if mmGetChatFile.defaultExpectation.paramPtrs == nil {
		mmGetChatFile.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetChatFileParamPtrs{}
	}
	mmGetChatFile.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChatFile.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChatFile
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) ExpectInParam2(in *mm_artifactv1alpha.GetChatFileRequest) *mArtifactPrivateServiceClientMockGetChatFile {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	if mmGetChatFile.defaultExpectation == nil {
		mmGetChatFile.defaultExpectation = &ArtifactPrivateServiceClientMockGetChatFileExpectation{}
	}

	if mmGetChatFile.defaultExpectation.params != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Expect")
	}

	if mmGetChatFile.defaultExpectation.paramPtrs == nil {
		mmGetChatFile.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetChatFileParamPtrs{}
	}
	mmGetChatFile.defaultExpectation.paramPtrs.in = &in
	mmGetChatFile.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetChatFile
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetChatFile {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	if mmGetChatFile.defaultExpectation == nil {
		mmGetChatFile.defaultExpectation = &ArtifactPrivateServiceClientMockGetChatFileExpectation{}
	}

	if mmGetChatFile.defaultExpectation.params != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Expect")
	}

	if mmGetChatFile.defaultExpectation.paramPtrs == nil {
		mmGetChatFile.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetChatFileParamPtrs{}
	}
	mmGetChatFile.defaultExpectation.paramPtrs.opts = &opts
	mmGetChatFile.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetChatFile
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockGetChatFile {
	if mmGetChatFile.mock.inspectFuncGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.GetChatFile")
	}

	mmGetChatFile.mock.inspectFuncGetChatFile = f

	return mmGetChatFile
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.GetChatFile
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Return(gp1 *mm_artifactv1alpha.GetChatFileResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	if mmGetChatFile.defaultExpectation == nil {
		mmGetChatFile.defaultExpectation = &ArtifactPrivateServiceClientMockGetChatFileExpectation{mock: mmGetChatFile.mock}
	}
	mmGetChatFile.defaultExpectation.results = &ArtifactPrivateServiceClientMockGetChatFileResults{gp1, err}
	mmGetChatFile.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChatFile.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.GetChatFile method
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Set(f func(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetChatFileResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmGetChatFile.defaultExpectation != nil {
		mmGetChatFile.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.GetChatFile method")
	}

	if len(mmGetChatFile.expectations) > 0 {
		mmGetChatFile.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.GetChatFile method")
	}

	mmGetChatFile.mock.funcGetChatFile = f
	mmGetChatFile.mock.funcGetChatFileOrigin = minimock.CallerInfo(1)
	return mmGetChatFile.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.GetChatFile which will trigger the result defined by the following
// Then helper
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) When(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockGetChatFileExpectation {
	if mmGetChatFile.mock.funcGetChatFile != nil {
		mmGetChatFile.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetChatFile mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockGetChatFileExpectation{
		mock:               mmGetChatFile.mock,
		params:             &ArtifactPrivateServiceClientMockGetChatFileParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockGetChatFileExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChatFile.expectations = append(mmGetChatFile.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.GetChatFile return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockGetChatFileExpectation) Then(gp1 *mm_artifactv1alpha.GetChatFileResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockGetChatFileResults{gp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.GetChatFile should be invoked
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Times(n uint64) *mArtifactPrivateServiceClientMockGetChatFile {
	if n == 0 {
		mmGetChatFile.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.GetChatFile mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChatFile.expectedInvocations, n)
	mmGetChatFile.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChatFile
}

func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) invocationsDone() bool {
	if len(mmGetChatFile.expectations) == 0 && mmGetChatFile.defaultExpectation == nil && mmGetChatFile.mock.funcGetChatFile == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChatFile.mock.afterGetChatFileCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChatFile.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChatFile implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmGetChatFile *ArtifactPrivateServiceClientMock) GetChatFile(ctx context.Context, in *mm_artifactv1alpha.GetChatFileRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetChatFileResponse, err error) {
	mm_atomic.AddUint64(&mmGetChatFile.beforeGetChatFileCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatFile.afterGetChatFileCounter, 1)

	mmGetChatFile.t.Helper()

	if mmGetChatFile.inspectFuncGetChatFile != nil {
		mmGetChatFile.inspectFuncGetChatFile(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockGetChatFileParams{ctx, in, opts}

	// Record call args
	mmGetChatFile.GetChatFileMock.mutex.Lock()
	mmGetChatFile.GetChatFileMock.callArgs = append(mmGetChatFile.GetChatFileMock.callArgs, &mm_params)
	mmGetChatFile.GetChatFileMock.mutex.Unlock()

	for _, e := range mmGetChatFile.GetChatFileMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetChatFile.GetChatFileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatFile.GetChatFileMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatFile.GetChatFileMock.defaultExpectation.params
		mm_want_ptrs := mmGetChatFile.GetChatFileMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockGetChatFileParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChatFile.t.Errorf("ArtifactPrivateServiceClientMock.GetChatFile got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatFile.GetChatFileMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetChatFile.t.Errorf("ArtifactPrivateServiceClientMock.GetChatFile got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatFile.GetChatFileMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetChatFile.t.Errorf("ArtifactPrivateServiceClientMock.GetChatFile got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatFile.GetChatFileMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatFile.t.Errorf("ArtifactPrivateServiceClientMock.GetChatFile got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChatFile.GetChatFileMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatFile.GetChatFileMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatFile.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.GetChatFile")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetChatFile.funcGetChatFile != nil {
		return mmGetChatFile.funcGetChatFile(ctx, in, opts...)
	}
	mmGetChatFile.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.GetChatFile. %v %v %v", ctx, in, opts)
	return
}

// GetChatFileAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.GetChatFile invocations
func (mmGetChatFile *ArtifactPrivateServiceClientMock) GetChatFileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatFile.afterGetChatFileCounter)
}

// GetChatFileBeforeCounter returns a count of ArtifactPrivateServiceClientMock.GetChatFile invocations
func (mmGetChatFile *ArtifactPrivateServiceClientMock) GetChatFileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatFile.beforeGetChatFileCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.GetChatFile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatFile *mArtifactPrivateServiceClientMockGetChatFile) Calls() []*ArtifactPrivateServiceClientMockGetChatFileParams {
	mmGetChatFile.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockGetChatFileParams, len(mmGetChatFile.callArgs))
	copy(argCopy, mmGetChatFile.callArgs)

	mmGetChatFile.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatFileDone returns true if the count of the GetChatFile invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockGetChatFileDone() bool {
	if m.GetChatFileMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatFileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatFileMock.invocationsDone()
}

// MinimockGetChatFileInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockGetChatFileInspect() {
	for _, e := range m.GetChatFileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetChatFile at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatFileCounter := mm_atomic.LoadUint64(&m.afterGetChatFileCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatFileMock.defaultExpectation != nil && afterGetChatFileCounter < 1 {
		if m.GetChatFileMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetChatFile at\n%s", m.GetChatFileMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetChatFile at\n%s with params: %#v", m.GetChatFileMock.defaultExpectation.expectationOrigins.origin, *m.GetChatFileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatFile != nil && afterGetChatFileCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetChatFile at\n%s", m.funcGetChatFileOrigin)
	}

	if !m.GetChatFileMock.invocationsDone() && afterGetChatFileCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.GetChatFile at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatFileMock.expectedInvocations), m.GetChatFileMock.expectedInvocationsOrigin, afterGetChatFileCounter)
	}
}

type mArtifactPrivateServiceClientMockGetFileAsMarkdown struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation
	expectations       []*ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation

	callArgs []*ArtifactPrivateServiceClientMockGetFileAsMarkdownParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation specifies expectation struct of the ArtifactPrivateServiceClient.GetFileAsMarkdown
type ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockGetFileAsMarkdownParams
	paramPtrs          *ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectationOrigins
	results            *ArtifactPrivateServiceClientMockGetFileAsMarkdownResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockGetFileAsMarkdownParams contains parameters of the ArtifactPrivateServiceClient.GetFileAsMarkdown
type ArtifactPrivateServiceClientMockGetFileAsMarkdownParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.GetFileAsMarkdownRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.GetFileAsMarkdown
type ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.GetFileAsMarkdownRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetFileAsMarkdownResults contains results of the ArtifactPrivateServiceClient.GetFileAsMarkdown
type ArtifactPrivateServiceClientMockGetFileAsMarkdownResults struct {
	gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse
	err error
}

// ArtifactPrivateServiceClientMockGetFileAsMarkdownOrigins contains origins of expectations of the ArtifactPrivateServiceClient.GetFileAsMarkdown
type ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Optional() *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	mmGetFileAsMarkdown.optional = true
	return mmGetFileAsMarkdown
}

// Expect sets up expected params for ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Expect(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	if mmGetFileAsMarkdown.defaultExpectation == nil {
		mmGetFileAsMarkdown.defaultExpectation = &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{}
	}

	if mmGetFileAsMarkdown.defaultExpectation.paramPtrs != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by ExpectParams functions")
	}

	mmGetFileAsMarkdown.defaultExpectation.params = &ArtifactPrivateServiceClientMockGetFileAsMarkdownParams{ctx, in, opts}
	mmGetFileAsMarkdown.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetFileAsMarkdown.expectations {
		if minimock.Equal(e.params, mmGetFileAsMarkdown.defaultExpectation.params) {
			mmGetFileAsMarkdown.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetFileAsMarkdown.defaultExpectation.params)
		}
	}

	return mmGetFileAsMarkdown
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	if mmGetFileAsMarkdown.defaultExpectation == nil {
		mmGetFileAsMarkdown.defaultExpectation = &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{}
	}

	if mmGetFileAsMarkdown.defaultExpectation.params != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Expect")
	}

	if mmGetFileAsMarkdown.defaultExpectation.paramPtrs == nil {
		mmGetFileAsMarkdown.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs{}
	}
	mmGetFileAsMarkdown.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetFileAsMarkdown.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetFileAsMarkdown
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) ExpectInParam2(in *mm_artifactv1alpha.GetFileAsMarkdownRequest) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	if mmGetFileAsMarkdown.defaultExpectation == nil {
		mmGetFileAsMarkdown.defaultExpectation = &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{}
	}

	if mmGetFileAsMarkdown.defaultExpectation.params != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Expect")
	}

	if mmGetFileAsMarkdown.defaultExpectation.paramPtrs == nil {
		mmGetFileAsMarkdown.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs{}
	}
	mmGetFileAsMarkdown.defaultExpectation.paramPtrs.in = &in
	mmGetFileAsMarkdown.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetFileAsMarkdown
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	if mmGetFileAsMarkdown.defaultExpectation == nil {
		mmGetFileAsMarkdown.defaultExpectation = &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{}
	}

	if mmGetFileAsMarkdown.defaultExpectation.params != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Expect")
	}

	if mmGetFileAsMarkdown.defaultExpectation.paramPtrs == nil {
		mmGetFileAsMarkdown.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetFileAsMarkdownParamPtrs{}
	}
	mmGetFileAsMarkdown.defaultExpectation.paramPtrs.opts = &opts
	mmGetFileAsMarkdown.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetFileAsMarkdown
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if mmGetFileAsMarkdown.mock.inspectFuncGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.GetFileAsMarkdown")
	}

	mmGetFileAsMarkdown.mock.inspectFuncGetFileAsMarkdown = f

	return mmGetFileAsMarkdown
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.GetFileAsMarkdown
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Return(gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	if mmGetFileAsMarkdown.defaultExpectation == nil {
		mmGetFileAsMarkdown.defaultExpectation = &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{mock: mmGetFileAsMarkdown.mock}
	}
	mmGetFileAsMarkdown.defaultExpectation.results = &ArtifactPrivateServiceClientMockGetFileAsMarkdownResults{gp1, err}
	mmGetFileAsMarkdown.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetFileAsMarkdown.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.GetFileAsMarkdown method
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Set(f func(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmGetFileAsMarkdown.defaultExpectation != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.GetFileAsMarkdown method")
	}

	if len(mmGetFileAsMarkdown.expectations) > 0 {
		mmGetFileAsMarkdown.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.GetFileAsMarkdown method")
	}

	mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown = f
	mmGetFileAsMarkdown.mock.funcGetFileAsMarkdownOrigin = minimock.CallerInfo(1)
	return mmGetFileAsMarkdown.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.GetFileAsMarkdown which will trigger the result defined by the following
// Then helper
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) When(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation {
	if mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation{
		mock:               mmGetFileAsMarkdown.mock,
		params:             &ArtifactPrivateServiceClientMockGetFileAsMarkdownParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetFileAsMarkdown.expectations = append(mmGetFileAsMarkdown.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.GetFileAsMarkdown return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockGetFileAsMarkdownExpectation) Then(gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockGetFileAsMarkdownResults{gp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.GetFileAsMarkdown should be invoked
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Times(n uint64) *mArtifactPrivateServiceClientMockGetFileAsMarkdown {
	if n == 0 {
		mmGetFileAsMarkdown.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.GetFileAsMarkdown mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetFileAsMarkdown.expectedInvocations, n)
	mmGetFileAsMarkdown.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetFileAsMarkdown
}

func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) invocationsDone() bool {
	if len(mmGetFileAsMarkdown.expectations) == 0 && mmGetFileAsMarkdown.defaultExpectation == nil && mmGetFileAsMarkdown.mock.funcGetFileAsMarkdown == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetFileAsMarkdown.mock.afterGetFileAsMarkdownCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetFileAsMarkdown.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetFileAsMarkdown implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmGetFileAsMarkdown *ArtifactPrivateServiceClientMock) GetFileAsMarkdown(ctx context.Context, in *mm_artifactv1alpha.GetFileAsMarkdownRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetFileAsMarkdownResponse, err error) {
	mm_atomic.AddUint64(&mmGetFileAsMarkdown.beforeGetFileAsMarkdownCounter, 1)
	defer mm_atomic.AddUint64(&mmGetFileAsMarkdown.afterGetFileAsMarkdownCounter, 1)

	mmGetFileAsMarkdown.t.Helper()

	if mmGetFileAsMarkdown.inspectFuncGetFileAsMarkdown != nil {
		mmGetFileAsMarkdown.inspectFuncGetFileAsMarkdown(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockGetFileAsMarkdownParams{ctx, in, opts}

	// Record call args
	mmGetFileAsMarkdown.GetFileAsMarkdownMock.mutex.Lock()
	mmGetFileAsMarkdown.GetFileAsMarkdownMock.callArgs = append(mmGetFileAsMarkdown.GetFileAsMarkdownMock.callArgs, &mm_params)
	mmGetFileAsMarkdown.GetFileAsMarkdownMock.mutex.Unlock()

	for _, e := range mmGetFileAsMarkdown.GetFileAsMarkdownMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.Counter, 1)
		mm_want := mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.params
		mm_want_ptrs := mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockGetFileAsMarkdownParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetFileAsMarkdown.t.Errorf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetFileAsMarkdown.t.Errorf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetFileAsMarkdown.t.Errorf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetFileAsMarkdown.t.Errorf("ArtifactPrivateServiceClientMock.GetFileAsMarkdown got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetFileAsMarkdown.GetFileAsMarkdownMock.defaultExpectation.results
		if mm_results == nil {
			mmGetFileAsMarkdown.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.GetFileAsMarkdown")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetFileAsMarkdown.funcGetFileAsMarkdown != nil {
		return mmGetFileAsMarkdown.funcGetFileAsMarkdown(ctx, in, opts...)
	}
	mmGetFileAsMarkdown.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown. %v %v %v", ctx, in, opts)
	return
}

// GetFileAsMarkdownAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.GetFileAsMarkdown invocations
func (mmGetFileAsMarkdown *ArtifactPrivateServiceClientMock) GetFileAsMarkdownAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFileAsMarkdown.afterGetFileAsMarkdownCounter)
}

// GetFileAsMarkdownBeforeCounter returns a count of ArtifactPrivateServiceClientMock.GetFileAsMarkdown invocations
func (mmGetFileAsMarkdown *ArtifactPrivateServiceClientMock) GetFileAsMarkdownBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFileAsMarkdown.beforeGetFileAsMarkdownCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetFileAsMarkdown *mArtifactPrivateServiceClientMockGetFileAsMarkdown) Calls() []*ArtifactPrivateServiceClientMockGetFileAsMarkdownParams {
	mmGetFileAsMarkdown.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockGetFileAsMarkdownParams, len(mmGetFileAsMarkdown.callArgs))
	copy(argCopy, mmGetFileAsMarkdown.callArgs)

	mmGetFileAsMarkdown.mutex.RUnlock()

	return argCopy
}

// MinimockGetFileAsMarkdownDone returns true if the count of the GetFileAsMarkdown invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockGetFileAsMarkdownDone() bool {
	if m.GetFileAsMarkdownMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetFileAsMarkdownMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetFileAsMarkdownMock.invocationsDone()
}

// MinimockGetFileAsMarkdownInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockGetFileAsMarkdownInspect() {
	for _, e := range m.GetFileAsMarkdownMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetFileAsMarkdownCounter := mm_atomic.LoadUint64(&m.afterGetFileAsMarkdownCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetFileAsMarkdownMock.defaultExpectation != nil && afterGetFileAsMarkdownCounter < 1 {
		if m.GetFileAsMarkdownMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown at\n%s", m.GetFileAsMarkdownMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown at\n%s with params: %#v", m.GetFileAsMarkdownMock.defaultExpectation.expectationOrigins.origin, *m.GetFileAsMarkdownMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFileAsMarkdown != nil && afterGetFileAsMarkdownCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetFileAsMarkdown at\n%s", m.funcGetFileAsMarkdownOrigin)
	}

	if !m.GetFileAsMarkdownMock.invocationsDone() && afterGetFileAsMarkdownCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.GetFileAsMarkdown at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetFileAsMarkdownMock.expectedInvocations), m.GetFileAsMarkdownMock.expectedInvocationsOrigin, afterGetFileAsMarkdownCounter)
	}
}

type mArtifactPrivateServiceClientMockGetObject struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockGetObjectExpectation
	expectations       []*ArtifactPrivateServiceClientMockGetObjectExpectation

	callArgs []*ArtifactPrivateServiceClientMockGetObjectParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockGetObjectExpectation specifies expectation struct of the ArtifactPrivateServiceClient.GetObject
type ArtifactPrivateServiceClientMockGetObjectExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockGetObjectParams
	paramPtrs          *ArtifactPrivateServiceClientMockGetObjectParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockGetObjectExpectationOrigins
	results            *ArtifactPrivateServiceClientMockGetObjectResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockGetObjectParams contains parameters of the ArtifactPrivateServiceClient.GetObject
type ArtifactPrivateServiceClientMockGetObjectParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.GetObjectRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetObjectParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.GetObject
type ArtifactPrivateServiceClientMockGetObjectParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.GetObjectRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetObjectResults contains results of the ArtifactPrivateServiceClient.GetObject
type ArtifactPrivateServiceClientMockGetObjectResults struct {
	gp1 *mm_artifactv1alpha.GetObjectResponse
	err error
}

// ArtifactPrivateServiceClientMockGetObjectOrigins contains origins of expectations of the ArtifactPrivateServiceClient.GetObject
type ArtifactPrivateServiceClientMockGetObjectExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Optional() *mArtifactPrivateServiceClientMockGetObject {
	mmGetObject.optional = true
	return mmGetObject
}

// Expect sets up expected params for ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Expect(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetObject {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	if mmGetObject.defaultExpectation == nil {
		mmGetObject.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectExpectation{}
	}

	if mmGetObject.defaultExpectation.paramPtrs != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by ExpectParams functions")
	}

	mmGetObject.defaultExpectation.params = &ArtifactPrivateServiceClientMockGetObjectParams{ctx, in, opts}
	mmGetObject.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetObject.expectations {
		if minimock.Equal(e.params, mmGetObject.defaultExpectation.params) {
			mmGetObject.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetObject.defaultExpectation.params)
		}
	}

	return mmGetObject
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockGetObject {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	if mmGetObject.defaultExpectation == nil {
		mmGetObject.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectExpectation{}
	}

	if mmGetObject.defaultExpectation.params != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Expect")
	}

	if mmGetObject.defaultExpectation.paramPtrs == nil {
		mmGetObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectParamPtrs{}
	}
	mmGetObject.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetObject.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetObject
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) ExpectInParam2(in *mm_artifactv1alpha.GetObjectRequest) *mArtifactPrivateServiceClientMockGetObject {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	if mmGetObject.defaultExpectation == nil {
		mmGetObject.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectExpectation{}
	}

	if mmGetObject.defaultExpectation.params != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Expect")
	}

	if mmGetObject.defaultExpectation.paramPtrs == nil {
		mmGetObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectParamPtrs{}
	}
	mmGetObject.defaultExpectation.paramPtrs.in = &in
	mmGetObject.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetObject
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetObject {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	if mmGetObject.defaultExpectation == nil {
		mmGetObject.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectExpectation{}
	}

	if mmGetObject.defaultExpectation.params != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Expect")
	}

	if mmGetObject.defaultExpectation.paramPtrs == nil {
		mmGetObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectParamPtrs{}
	}
	mmGetObject.defaultExpectation.paramPtrs.opts = &opts
	mmGetObject.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetObject
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockGetObject {
	if mmGetObject.mock.inspectFuncGetObject != nil {
		mmGetObject.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.GetObject")
	}

	mmGetObject.mock.inspectFuncGetObject = f

	return mmGetObject
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.GetObject
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Return(gp1 *mm_artifactv1alpha.GetObjectResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	if mmGetObject.defaultExpectation == nil {
		mmGetObject.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectExpectation{mock: mmGetObject.mock}
	}
	mmGetObject.defaultExpectation.results = &ArtifactPrivateServiceClientMockGetObjectResults{gp1, err}
	mmGetObject.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetObject.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.GetObject method
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Set(f func(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmGetObject.defaultExpectation != nil {
		mmGetObject.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.GetObject method")
	}

	if len(mmGetObject.expectations) > 0 {
		mmGetObject.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.GetObject method")
	}

	mmGetObject.mock.funcGetObject = f
	mmGetObject.mock.funcGetObjectOrigin = minimock.CallerInfo(1)
	return mmGetObject.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.GetObject which will trigger the result defined by the following
// Then helper
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) When(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockGetObjectExpectation {
	if mmGetObject.mock.funcGetObject != nil {
		mmGetObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObject mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockGetObjectExpectation{
		mock:               mmGetObject.mock,
		params:             &ArtifactPrivateServiceClientMockGetObjectParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockGetObjectExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetObject.expectations = append(mmGetObject.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.GetObject return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockGetObjectExpectation) Then(gp1 *mm_artifactv1alpha.GetObjectResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockGetObjectResults{gp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.GetObject should be invoked
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Times(n uint64) *mArtifactPrivateServiceClientMockGetObject {
	if n == 0 {
		mmGetObject.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.GetObject mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetObject.expectedInvocations, n)
	mmGetObject.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetObject
}

func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) invocationsDone() bool {
	if len(mmGetObject.expectations) == 0 && mmGetObject.defaultExpectation == nil && mmGetObject.mock.funcGetObject == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetObject.mock.afterGetObjectCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetObject.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetObject implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmGetObject *ArtifactPrivateServiceClientMock) GetObject(ctx context.Context, in *mm_artifactv1alpha.GetObjectRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectResponse, err error) {
	mm_atomic.AddUint64(&mmGetObject.beforeGetObjectCounter, 1)
	defer mm_atomic.AddUint64(&mmGetObject.afterGetObjectCounter, 1)

	mmGetObject.t.Helper()

	if mmGetObject.inspectFuncGetObject != nil {
		mmGetObject.inspectFuncGetObject(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockGetObjectParams{ctx, in, opts}

	// Record call args
	mmGetObject.GetObjectMock.mutex.Lock()
	mmGetObject.GetObjectMock.callArgs = append(mmGetObject.GetObjectMock.callArgs, &mm_params)
	mmGetObject.GetObjectMock.mutex.Unlock()

	for _, e := range mmGetObject.GetObjectMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetObject.GetObjectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetObject.GetObjectMock.defaultExpectation.Counter, 1)
		mm_want := mmGetObject.GetObjectMock.defaultExpectation.params
		mm_want_ptrs := mmGetObject.GetObjectMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockGetObjectParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetObject.t.Errorf("ArtifactPrivateServiceClientMock.GetObject got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObject.GetObjectMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetObject.t.Errorf("ArtifactPrivateServiceClientMock.GetObject got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObject.GetObjectMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetObject.t.Errorf("ArtifactPrivateServiceClientMock.GetObject got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObject.GetObjectMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetObject.t.Errorf("ArtifactPrivateServiceClientMock.GetObject got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetObject.GetObjectMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetObject.GetObjectMock.defaultExpectation.results
		if mm_results == nil {
			mmGetObject.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.GetObject")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetObject.funcGetObject != nil {
		return mmGetObject.funcGetObject(ctx, in, opts...)
	}
	mmGetObject.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.GetObject. %v %v %v", ctx, in, opts)
	return
}

// GetObjectAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.GetObject invocations
func (mmGetObject *ArtifactPrivateServiceClientMock) GetObjectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetObject.afterGetObjectCounter)
}

// GetObjectBeforeCounter returns a count of ArtifactPrivateServiceClientMock.GetObject invocations
func (mmGetObject *ArtifactPrivateServiceClientMock) GetObjectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetObject.beforeGetObjectCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.GetObject.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetObject *mArtifactPrivateServiceClientMockGetObject) Calls() []*ArtifactPrivateServiceClientMockGetObjectParams {
	mmGetObject.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockGetObjectParams, len(mmGetObject.callArgs))
	copy(argCopy, mmGetObject.callArgs)

	mmGetObject.mutex.RUnlock()

	return argCopy
}

// MinimockGetObjectDone returns true if the count of the GetObject invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockGetObjectDone() bool {
	if m.GetObjectMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetObjectMock.invocationsDone()
}

// MinimockGetObjectInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockGetObjectInspect() {
	for _, e := range m.GetObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObject at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetObjectCounter := mm_atomic.LoadUint64(&m.afterGetObjectCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetObjectMock.defaultExpectation != nil && afterGetObjectCounter < 1 {
		if m.GetObjectMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObject at\n%s", m.GetObjectMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObject at\n%s with params: %#v", m.GetObjectMock.defaultExpectation.expectationOrigins.origin, *m.GetObjectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetObject != nil && afterGetObjectCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObject at\n%s", m.funcGetObjectOrigin)
	}

	if !m.GetObjectMock.invocationsDone() && afterGetObjectCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.GetObject at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetObjectMock.expectedInvocations), m.GetObjectMock.expectedInvocationsOrigin, afterGetObjectCounter)
	}
}

type mArtifactPrivateServiceClientMockGetObjectURL struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockGetObjectURLExpectation
	expectations       []*ArtifactPrivateServiceClientMockGetObjectURLExpectation

	callArgs []*ArtifactPrivateServiceClientMockGetObjectURLParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockGetObjectURLExpectation specifies expectation struct of the ArtifactPrivateServiceClient.GetObjectURL
type ArtifactPrivateServiceClientMockGetObjectURLExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockGetObjectURLParams
	paramPtrs          *ArtifactPrivateServiceClientMockGetObjectURLParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockGetObjectURLExpectationOrigins
	results            *ArtifactPrivateServiceClientMockGetObjectURLResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockGetObjectURLParams contains parameters of the ArtifactPrivateServiceClient.GetObjectURL
type ArtifactPrivateServiceClientMockGetObjectURLParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.GetObjectURLRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetObjectURLParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.GetObjectURL
type ArtifactPrivateServiceClientMockGetObjectURLParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.GetObjectURLRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetObjectURLResults contains results of the ArtifactPrivateServiceClient.GetObjectURL
type ArtifactPrivateServiceClientMockGetObjectURLResults struct {
	gp1 *mm_artifactv1alpha.GetObjectURLResponse
	err error
}

// ArtifactPrivateServiceClientMockGetObjectURLOrigins contains origins of expectations of the ArtifactPrivateServiceClient.GetObjectURL
type ArtifactPrivateServiceClientMockGetObjectURLExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Optional() *mArtifactPrivateServiceClientMockGetObjectURL {
	mmGetObjectURL.optional = true
	return mmGetObjectURL
}

// Expect sets up expected params for ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Expect(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetObjectURL {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	if mmGetObjectURL.defaultExpectation == nil {
		mmGetObjectURL.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectURLExpectation{}
	}

	if mmGetObjectURL.defaultExpectation.paramPtrs != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by ExpectParams functions")
	}

	mmGetObjectURL.defaultExpectation.params = &ArtifactPrivateServiceClientMockGetObjectURLParams{ctx, in, opts}
	mmGetObjectURL.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetObjectURL.expectations {
		if minimock.Equal(e.params, mmGetObjectURL.defaultExpectation.params) {
			mmGetObjectURL.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetObjectURL.defaultExpectation.params)
		}
	}

	return mmGetObjectURL
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockGetObjectURL {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	if mmGetObjectURL.defaultExpectation == nil {
		mmGetObjectURL.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectURLExpectation{}
	}

	if mmGetObjectURL.defaultExpectation.params != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Expect")
	}

	if mmGetObjectURL.defaultExpectation.paramPtrs == nil {
		mmGetObjectURL.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectURLParamPtrs{}
	}
	mmGetObjectURL.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetObjectURL.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetObjectURL
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) ExpectInParam2(in *mm_artifactv1alpha.GetObjectURLRequest) *mArtifactPrivateServiceClientMockGetObjectURL {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	if mmGetObjectURL.defaultExpectation == nil {
		mmGetObjectURL.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectURLExpectation{}
	}

	if mmGetObjectURL.defaultExpectation.params != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Expect")
	}

	if mmGetObjectURL.defaultExpectation.paramPtrs == nil {
		mmGetObjectURL.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectURLParamPtrs{}
	}
	mmGetObjectURL.defaultExpectation.paramPtrs.in = &in
	mmGetObjectURL.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetObjectURL
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetObjectURL {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	if mmGetObjectURL.defaultExpectation == nil {
		mmGetObjectURL.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectURLExpectation{}
	}

	if mmGetObjectURL.defaultExpectation.params != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Expect")
	}

	if mmGetObjectURL.defaultExpectation.paramPtrs == nil {
		mmGetObjectURL.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetObjectURLParamPtrs{}
	}
	mmGetObjectURL.defaultExpectation.paramPtrs.opts = &opts
	mmGetObjectURL.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetObjectURL
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockGetObjectURL {
	if mmGetObjectURL.mock.inspectFuncGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.GetObjectURL")
	}

	mmGetObjectURL.mock.inspectFuncGetObjectURL = f

	return mmGetObjectURL
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.GetObjectURL
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Return(gp1 *mm_artifactv1alpha.GetObjectURLResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	if mmGetObjectURL.defaultExpectation == nil {
		mmGetObjectURL.defaultExpectation = &ArtifactPrivateServiceClientMockGetObjectURLExpectation{mock: mmGetObjectURL.mock}
	}
	mmGetObjectURL.defaultExpectation.results = &ArtifactPrivateServiceClientMockGetObjectURLResults{gp1, err}
	mmGetObjectURL.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetObjectURL.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.GetObjectURL method
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Set(f func(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectURLResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmGetObjectURL.defaultExpectation != nil {
		mmGetObjectURL.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.GetObjectURL method")
	}

	if len(mmGetObjectURL.expectations) > 0 {
		mmGetObjectURL.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.GetObjectURL method")
	}

	mmGetObjectURL.mock.funcGetObjectURL = f
	mmGetObjectURL.mock.funcGetObjectURLOrigin = minimock.CallerInfo(1)
	return mmGetObjectURL.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.GetObjectURL which will trigger the result defined by the following
// Then helper
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) When(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockGetObjectURLExpectation {
	if mmGetObjectURL.mock.funcGetObjectURL != nil {
		mmGetObjectURL.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetObjectURL mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockGetObjectURLExpectation{
		mock:               mmGetObjectURL.mock,
		params:             &ArtifactPrivateServiceClientMockGetObjectURLParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockGetObjectURLExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetObjectURL.expectations = append(mmGetObjectURL.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.GetObjectURL return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockGetObjectURLExpectation) Then(gp1 *mm_artifactv1alpha.GetObjectURLResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockGetObjectURLResults{gp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.GetObjectURL should be invoked
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Times(n uint64) *mArtifactPrivateServiceClientMockGetObjectURL {
	if n == 0 {
		mmGetObjectURL.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.GetObjectURL mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetObjectURL.expectedInvocations, n)
	mmGetObjectURL.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetObjectURL
}

func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) invocationsDone() bool {
	if len(mmGetObjectURL.expectations) == 0 && mmGetObjectURL.defaultExpectation == nil && mmGetObjectURL.mock.funcGetObjectURL == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetObjectURL.mock.afterGetObjectURLCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetObjectURL.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetObjectURL implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmGetObjectURL *ArtifactPrivateServiceClientMock) GetObjectURL(ctx context.Context, in *mm_artifactv1alpha.GetObjectURLRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetObjectURLResponse, err error) {
	mm_atomic.AddUint64(&mmGetObjectURL.beforeGetObjectURLCounter, 1)
	defer mm_atomic.AddUint64(&mmGetObjectURL.afterGetObjectURLCounter, 1)

	mmGetObjectURL.t.Helper()

	if mmGetObjectURL.inspectFuncGetObjectURL != nil {
		mmGetObjectURL.inspectFuncGetObjectURL(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockGetObjectURLParams{ctx, in, opts}

	// Record call args
	mmGetObjectURL.GetObjectURLMock.mutex.Lock()
	mmGetObjectURL.GetObjectURLMock.callArgs = append(mmGetObjectURL.GetObjectURLMock.callArgs, &mm_params)
	mmGetObjectURL.GetObjectURLMock.mutex.Unlock()

	for _, e := range mmGetObjectURL.GetObjectURLMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetObjectURL.GetObjectURLMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetObjectURL.GetObjectURLMock.defaultExpectation.Counter, 1)
		mm_want := mmGetObjectURL.GetObjectURLMock.defaultExpectation.params
		mm_want_ptrs := mmGetObjectURL.GetObjectURLMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockGetObjectURLParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetObjectURL.t.Errorf("ArtifactPrivateServiceClientMock.GetObjectURL got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObjectURL.GetObjectURLMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetObjectURL.t.Errorf("ArtifactPrivateServiceClientMock.GetObjectURL got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObjectURL.GetObjectURLMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetObjectURL.t.Errorf("ArtifactPrivateServiceClientMock.GetObjectURL got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetObjectURL.GetObjectURLMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetObjectURL.t.Errorf("ArtifactPrivateServiceClientMock.GetObjectURL got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetObjectURL.GetObjectURLMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetObjectURL.GetObjectURLMock.defaultExpectation.results
		if mm_results == nil {
			mmGetObjectURL.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.GetObjectURL")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetObjectURL.funcGetObjectURL != nil {
		return mmGetObjectURL.funcGetObjectURL(ctx, in, opts...)
	}
	mmGetObjectURL.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.GetObjectURL. %v %v %v", ctx, in, opts)
	return
}

// GetObjectURLAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.GetObjectURL invocations
func (mmGetObjectURL *ArtifactPrivateServiceClientMock) GetObjectURLAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetObjectURL.afterGetObjectURLCounter)
}

// GetObjectURLBeforeCounter returns a count of ArtifactPrivateServiceClientMock.GetObjectURL invocations
func (mmGetObjectURL *ArtifactPrivateServiceClientMock) GetObjectURLBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetObjectURL.beforeGetObjectURLCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.GetObjectURL.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetObjectURL *mArtifactPrivateServiceClientMockGetObjectURL) Calls() []*ArtifactPrivateServiceClientMockGetObjectURLParams {
	mmGetObjectURL.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockGetObjectURLParams, len(mmGetObjectURL.callArgs))
	copy(argCopy, mmGetObjectURL.callArgs)

	mmGetObjectURL.mutex.RUnlock()

	return argCopy
}

// MinimockGetObjectURLDone returns true if the count of the GetObjectURL invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockGetObjectURLDone() bool {
	if m.GetObjectURLMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetObjectURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetObjectURLMock.invocationsDone()
}

// MinimockGetObjectURLInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockGetObjectURLInspect() {
	for _, e := range m.GetObjectURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObjectURL at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetObjectURLCounter := mm_atomic.LoadUint64(&m.afterGetObjectURLCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetObjectURLMock.defaultExpectation != nil && afterGetObjectURLCounter < 1 {
		if m.GetObjectURLMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObjectURL at\n%s", m.GetObjectURLMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObjectURL at\n%s with params: %#v", m.GetObjectURLMock.defaultExpectation.expectationOrigins.origin, *m.GetObjectURLMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetObjectURL != nil && afterGetObjectURLCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetObjectURL at\n%s", m.funcGetObjectURLOrigin)
	}

	if !m.GetObjectURLMock.invocationsDone() && afterGetObjectURLCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.GetObjectURL at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetObjectURLMock.expectedInvocations), m.GetObjectURLMock.expectedInvocationsOrigin, afterGetObjectURLCounter)
	}
}

type mArtifactPrivateServiceClientMockGetRepositoryTag struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockGetRepositoryTagExpectation
	expectations       []*ArtifactPrivateServiceClientMockGetRepositoryTagExpectation

	callArgs []*ArtifactPrivateServiceClientMockGetRepositoryTagParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockGetRepositoryTagExpectation specifies expectation struct of the ArtifactPrivateServiceClient.GetRepositoryTag
type ArtifactPrivateServiceClientMockGetRepositoryTagExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockGetRepositoryTagParams
	paramPtrs          *ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockGetRepositoryTagExpectationOrigins
	results            *ArtifactPrivateServiceClientMockGetRepositoryTagResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockGetRepositoryTagParams contains parameters of the ArtifactPrivateServiceClient.GetRepositoryTag
type ArtifactPrivateServiceClientMockGetRepositoryTagParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.GetRepositoryTagRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.GetRepositoryTag
type ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.GetRepositoryTagRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockGetRepositoryTagResults contains results of the ArtifactPrivateServiceClient.GetRepositoryTag
type ArtifactPrivateServiceClientMockGetRepositoryTagResults struct {
	gp1 *mm_artifactv1alpha.GetRepositoryTagResponse
	err error
}

// ArtifactPrivateServiceClientMockGetRepositoryTagOrigins contains origins of expectations of the ArtifactPrivateServiceClient.GetRepositoryTag
type ArtifactPrivateServiceClientMockGetRepositoryTagExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Optional() *mArtifactPrivateServiceClientMockGetRepositoryTag {
	mmGetRepositoryTag.optional = true
	return mmGetRepositoryTag
}

// Expect sets up expected params for ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Expect(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	if mmGetRepositoryTag.defaultExpectation == nil {
		mmGetRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{}
	}

	if mmGetRepositoryTag.defaultExpectation.paramPtrs != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by ExpectParams functions")
	}

	mmGetRepositoryTag.defaultExpectation.params = &ArtifactPrivateServiceClientMockGetRepositoryTagParams{ctx, in, opts}
	mmGetRepositoryTag.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetRepositoryTag.expectations {
		if minimock.Equal(e.params, mmGetRepositoryTag.defaultExpectation.params) {
			mmGetRepositoryTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRepositoryTag.defaultExpectation.params)
		}
	}

	return mmGetRepositoryTag
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	if mmGetRepositoryTag.defaultExpectation == nil {
		mmGetRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{}
	}

	if mmGetRepositoryTag.defaultExpectation.params != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Expect")
	}

	if mmGetRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmGetRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs{}
	}
	mmGetRepositoryTag.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetRepositoryTag.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetRepositoryTag
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) ExpectInParam2(in *mm_artifactv1alpha.GetRepositoryTagRequest) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	if mmGetRepositoryTag.defaultExpectation == nil {
		mmGetRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{}
	}

	if mmGetRepositoryTag.defaultExpectation.params != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Expect")
	}

	if mmGetRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmGetRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs{}
	}
	mmGetRepositoryTag.defaultExpectation.paramPtrs.in = &in
	mmGetRepositoryTag.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetRepositoryTag
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	if mmGetRepositoryTag.defaultExpectation == nil {
		mmGetRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{}
	}

	if mmGetRepositoryTag.defaultExpectation.params != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Expect")
	}

	if mmGetRepositoryTag.defaultExpectation.paramPtrs == nil {
		mmGetRepositoryTag.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockGetRepositoryTagParamPtrs{}
	}
	mmGetRepositoryTag.defaultExpectation.paramPtrs.opts = &opts
	mmGetRepositoryTag.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetRepositoryTag
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if mmGetRepositoryTag.mock.inspectFuncGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.GetRepositoryTag")
	}

	mmGetRepositoryTag.mock.inspectFuncGetRepositoryTag = f

	return mmGetRepositoryTag
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.GetRepositoryTag
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Return(gp1 *mm_artifactv1alpha.GetRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	if mmGetRepositoryTag.defaultExpectation == nil {
		mmGetRepositoryTag.defaultExpectation = &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{mock: mmGetRepositoryTag.mock}
	}
	mmGetRepositoryTag.defaultExpectation.results = &ArtifactPrivateServiceClientMockGetRepositoryTagResults{gp1, err}
	mmGetRepositoryTag.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetRepositoryTag.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.GetRepositoryTag method
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Set(f func(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetRepositoryTagResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmGetRepositoryTag.defaultExpectation != nil {
		mmGetRepositoryTag.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.GetRepositoryTag method")
	}

	if len(mmGetRepositoryTag.expectations) > 0 {
		mmGetRepositoryTag.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.GetRepositoryTag method")
	}

	mmGetRepositoryTag.mock.funcGetRepositoryTag = f
	mmGetRepositoryTag.mock.funcGetRepositoryTagOrigin = minimock.CallerInfo(1)
	return mmGetRepositoryTag.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.GetRepositoryTag which will trigger the result defined by the following
// Then helper
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) When(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockGetRepositoryTagExpectation {
	if mmGetRepositoryTag.mock.funcGetRepositoryTag != nil {
		mmGetRepositoryTag.mock.t.Fatalf("ArtifactPrivateServiceClientMock.GetRepositoryTag mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockGetRepositoryTagExpectation{
		mock:               mmGetRepositoryTag.mock,
		params:             &ArtifactPrivateServiceClientMockGetRepositoryTagParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockGetRepositoryTagExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetRepositoryTag.expectations = append(mmGetRepositoryTag.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.GetRepositoryTag return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockGetRepositoryTagExpectation) Then(gp1 *mm_artifactv1alpha.GetRepositoryTagResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockGetRepositoryTagResults{gp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.GetRepositoryTag should be invoked
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Times(n uint64) *mArtifactPrivateServiceClientMockGetRepositoryTag {
	if n == 0 {
		mmGetRepositoryTag.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.GetRepositoryTag mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetRepositoryTag.expectedInvocations, n)
	mmGetRepositoryTag.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetRepositoryTag
}

func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) invocationsDone() bool {
	if len(mmGetRepositoryTag.expectations) == 0 && mmGetRepositoryTag.defaultExpectation == nil && mmGetRepositoryTag.mock.funcGetRepositoryTag == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetRepositoryTag.mock.afterGetRepositoryTagCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetRepositoryTag.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetRepositoryTag implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmGetRepositoryTag *ArtifactPrivateServiceClientMock) GetRepositoryTag(ctx context.Context, in *mm_artifactv1alpha.GetRepositoryTagRequest, opts ...grpc.CallOption) (gp1 *mm_artifactv1alpha.GetRepositoryTagResponse, err error) {
	mm_atomic.AddUint64(&mmGetRepositoryTag.beforeGetRepositoryTagCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRepositoryTag.afterGetRepositoryTagCounter, 1)

	mmGetRepositoryTag.t.Helper()

	if mmGetRepositoryTag.inspectFuncGetRepositoryTag != nil {
		mmGetRepositoryTag.inspectFuncGetRepositoryTag(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockGetRepositoryTagParams{ctx, in, opts}

	// Record call args
	mmGetRepositoryTag.GetRepositoryTagMock.mutex.Lock()
	mmGetRepositoryTag.GetRepositoryTagMock.callArgs = append(mmGetRepositoryTag.GetRepositoryTagMock.callArgs, &mm_params)
	mmGetRepositoryTag.GetRepositoryTagMock.mutex.Unlock()

	for _, e := range mmGetRepositoryTag.GetRepositoryTagMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.params
		mm_want_ptrs := mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockGetRepositoryTagParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.GetRepositoryTag got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.GetRepositoryTag got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.GetRepositoryTag got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRepositoryTag.t.Errorf("ArtifactPrivateServiceClientMock.GetRepositoryTag got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRepositoryTag.GetRepositoryTagMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRepositoryTag.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.GetRepositoryTag")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetRepositoryTag.funcGetRepositoryTag != nil {
		return mmGetRepositoryTag.funcGetRepositoryTag(ctx, in, opts...)
	}
	mmGetRepositoryTag.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.GetRepositoryTag. %v %v %v", ctx, in, opts)
	return
}

// GetRepositoryTagAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.GetRepositoryTag invocations
func (mmGetRepositoryTag *ArtifactPrivateServiceClientMock) GetRepositoryTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRepositoryTag.afterGetRepositoryTagCounter)
}

// GetRepositoryTagBeforeCounter returns a count of ArtifactPrivateServiceClientMock.GetRepositoryTag invocations
func (mmGetRepositoryTag *ArtifactPrivateServiceClientMock) GetRepositoryTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRepositoryTag.beforeGetRepositoryTagCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.GetRepositoryTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRepositoryTag *mArtifactPrivateServiceClientMockGetRepositoryTag) Calls() []*ArtifactPrivateServiceClientMockGetRepositoryTagParams {
	mmGetRepositoryTag.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockGetRepositoryTagParams, len(mmGetRepositoryTag.callArgs))
	copy(argCopy, mmGetRepositoryTag.callArgs)

	mmGetRepositoryTag.mutex.RUnlock()

	return argCopy
}

// MinimockGetRepositoryTagDone returns true if the count of the GetRepositoryTag invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockGetRepositoryTagDone() bool {
	if m.GetRepositoryTagMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetRepositoryTagMock.invocationsDone()
}

// MinimockGetRepositoryTagInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockGetRepositoryTagInspect() {
	for _, e := range m.GetRepositoryTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetRepositoryTag at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetRepositoryTagCounter := mm_atomic.LoadUint64(&m.afterGetRepositoryTagCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetRepositoryTagMock.defaultExpectation != nil && afterGetRepositoryTagCounter < 1 {
		if m.GetRepositoryTagMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetRepositoryTag at\n%s", m.GetRepositoryTagMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetRepositoryTag at\n%s with params: %#v", m.GetRepositoryTagMock.defaultExpectation.expectationOrigins.origin, *m.GetRepositoryTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRepositoryTag != nil && afterGetRepositoryTagCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.GetRepositoryTag at\n%s", m.funcGetRepositoryTagOrigin)
	}

	if !m.GetRepositoryTagMock.invocationsDone() && afterGetRepositoryTagCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.GetRepositoryTag at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetRepositoryTagMock.expectedInvocations), m.GetRepositoryTagMock.expectedInvocationsOrigin, afterGetRepositoryTagCounter)
	}
}

type mArtifactPrivateServiceClientMockListRepositoryTags struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockListRepositoryTagsExpectation
	expectations       []*ArtifactPrivateServiceClientMockListRepositoryTagsExpectation

	callArgs []*ArtifactPrivateServiceClientMockListRepositoryTagsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockListRepositoryTagsExpectation specifies expectation struct of the ArtifactPrivateServiceClient.ListRepositoryTags
type ArtifactPrivateServiceClientMockListRepositoryTagsExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockListRepositoryTagsParams
	paramPtrs          *ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockListRepositoryTagsExpectationOrigins
	results            *ArtifactPrivateServiceClientMockListRepositoryTagsResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockListRepositoryTagsParams contains parameters of the ArtifactPrivateServiceClient.ListRepositoryTags
type ArtifactPrivateServiceClientMockListRepositoryTagsParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.ListRepositoryTagsRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.ListRepositoryTags
type ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.ListRepositoryTagsRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockListRepositoryTagsResults contains results of the ArtifactPrivateServiceClient.ListRepositoryTags
type ArtifactPrivateServiceClientMockListRepositoryTagsResults struct {
	lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse
	err error
}

// ArtifactPrivateServiceClientMockListRepositoryTagsOrigins contains origins of expectations of the ArtifactPrivateServiceClient.ListRepositoryTags
type ArtifactPrivateServiceClientMockListRepositoryTagsExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Optional() *mArtifactPrivateServiceClientMockListRepositoryTags {
	mmListRepositoryTags.optional = true
	return mmListRepositoryTags
}

// Expect sets up expected params for ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Expect(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	if mmListRepositoryTags.defaultExpectation == nil {
		mmListRepositoryTags.defaultExpectation = &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{}
	}

	if mmListRepositoryTags.defaultExpectation.paramPtrs != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by ExpectParams functions")
	}

	mmListRepositoryTags.defaultExpectation.params = &ArtifactPrivateServiceClientMockListRepositoryTagsParams{ctx, in, opts}
	mmListRepositoryTags.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListRepositoryTags.expectations {
		if minimock.Equal(e.params, mmListRepositoryTags.defaultExpectation.params) {
			mmListRepositoryTags.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListRepositoryTags.defaultExpectation.params)
		}
	}

	return mmListRepositoryTags
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	if mmListRepositoryTags.defaultExpectation == nil {
		mmListRepositoryTags.defaultExpectation = &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{}
	}

	if mmListRepositoryTags.defaultExpectation.params != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Expect")
	}

	if mmListRepositoryTags.defaultExpectation.paramPtrs == nil {
		mmListRepositoryTags.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs{}
	}
	mmListRepositoryTags.defaultExpectation.paramPtrs.ctx = &ctx
	mmListRepositoryTags.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListRepositoryTags
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) ExpectInParam2(in *mm_artifactv1alpha.ListRepositoryTagsRequest) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	if mmListRepositoryTags.defaultExpectation == nil {
		mmListRepositoryTags.defaultExpectation = &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{}
	}

	if mmListRepositoryTags.defaultExpectation.params != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Expect")
	}

	if mmListRepositoryTags.defaultExpectation.paramPtrs == nil {
		mmListRepositoryTags.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs{}
	}
	mmListRepositoryTags.defaultExpectation.paramPtrs.in = &in
	mmListRepositoryTags.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmListRepositoryTags
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	if mmListRepositoryTags.defaultExpectation == nil {
		mmListRepositoryTags.defaultExpectation = &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{}
	}

	if mmListRepositoryTags.defaultExpectation.params != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Expect")
	}

	if mmListRepositoryTags.defaultExpectation.paramPtrs == nil {
		mmListRepositoryTags.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockListRepositoryTagsParamPtrs{}
	}
	mmListRepositoryTags.defaultExpectation.paramPtrs.opts = &opts
	mmListRepositoryTags.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmListRepositoryTags
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if mmListRepositoryTags.mock.inspectFuncListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.ListRepositoryTags")
	}

	mmListRepositoryTags.mock.inspectFuncListRepositoryTags = f

	return mmListRepositoryTags
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.ListRepositoryTags
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Return(lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	if mmListRepositoryTags.defaultExpectation == nil {
		mmListRepositoryTags.defaultExpectation = &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{mock: mmListRepositoryTags.mock}
	}
	mmListRepositoryTags.defaultExpectation.results = &ArtifactPrivateServiceClientMockListRepositoryTagsResults{lp1, err}
	mmListRepositoryTags.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListRepositoryTags.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.ListRepositoryTags method
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Set(f func(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption) (lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmListRepositoryTags.defaultExpectation != nil {
		mmListRepositoryTags.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.ListRepositoryTags method")
	}

	if len(mmListRepositoryTags.expectations) > 0 {
		mmListRepositoryTags.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.ListRepositoryTags method")
	}

	mmListRepositoryTags.mock.funcListRepositoryTags = f
	mmListRepositoryTags.mock.funcListRepositoryTagsOrigin = minimock.CallerInfo(1)
	return mmListRepositoryTags.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.ListRepositoryTags which will trigger the result defined by the following
// Then helper
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) When(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockListRepositoryTagsExpectation {
	if mmListRepositoryTags.mock.funcListRepositoryTags != nil {
		mmListRepositoryTags.mock.t.Fatalf("ArtifactPrivateServiceClientMock.ListRepositoryTags mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockListRepositoryTagsExpectation{
		mock:               mmListRepositoryTags.mock,
		params:             &ArtifactPrivateServiceClientMockListRepositoryTagsParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockListRepositoryTagsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListRepositoryTags.expectations = append(mmListRepositoryTags.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.ListRepositoryTags return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockListRepositoryTagsExpectation) Then(lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockListRepositoryTagsResults{lp1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.ListRepositoryTags should be invoked
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Times(n uint64) *mArtifactPrivateServiceClientMockListRepositoryTags {
	if n == 0 {
		mmListRepositoryTags.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.ListRepositoryTags mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListRepositoryTags.expectedInvocations, n)
	mmListRepositoryTags.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListRepositoryTags
}

func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) invocationsDone() bool {
	if len(mmListRepositoryTags.expectations) == 0 && mmListRepositoryTags.defaultExpectation == nil && mmListRepositoryTags.mock.funcListRepositoryTags == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListRepositoryTags.mock.afterListRepositoryTagsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListRepositoryTags.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListRepositoryTags implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmListRepositoryTags *ArtifactPrivateServiceClientMock) ListRepositoryTags(ctx context.Context, in *mm_artifactv1alpha.ListRepositoryTagsRequest, opts ...grpc.CallOption) (lp1 *mm_artifactv1alpha.ListRepositoryTagsResponse, err error) {
	mm_atomic.AddUint64(&mmListRepositoryTags.beforeListRepositoryTagsCounter, 1)
	defer mm_atomic.AddUint64(&mmListRepositoryTags.afterListRepositoryTagsCounter, 1)

	mmListRepositoryTags.t.Helper()

	if mmListRepositoryTags.inspectFuncListRepositoryTags != nil {
		mmListRepositoryTags.inspectFuncListRepositoryTags(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockListRepositoryTagsParams{ctx, in, opts}

	// Record call args
	mmListRepositoryTags.ListRepositoryTagsMock.mutex.Lock()
	mmListRepositoryTags.ListRepositoryTagsMock.callArgs = append(mmListRepositoryTags.ListRepositoryTagsMock.callArgs, &mm_params)
	mmListRepositoryTags.ListRepositoryTagsMock.mutex.Unlock()

	for _, e := range mmListRepositoryTags.ListRepositoryTagsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.Counter, 1)
		mm_want := mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.params
		mm_want_ptrs := mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockListRepositoryTagsParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListRepositoryTags.t.Errorf("ArtifactPrivateServiceClientMock.ListRepositoryTags got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmListRepositoryTags.t.Errorf("ArtifactPrivateServiceClientMock.ListRepositoryTags got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmListRepositoryTags.t.Errorf("ArtifactPrivateServiceClientMock.ListRepositoryTags got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListRepositoryTags.t.Errorf("ArtifactPrivateServiceClientMock.ListRepositoryTags got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListRepositoryTags.ListRepositoryTagsMock.defaultExpectation.results
		if mm_results == nil {
			mmListRepositoryTags.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.ListRepositoryTags")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmListRepositoryTags.funcListRepositoryTags != nil {
		return mmListRepositoryTags.funcListRepositoryTags(ctx, in, opts...)
	}
	mmListRepositoryTags.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.ListRepositoryTags. %v %v %v", ctx, in, opts)
	return
}

// ListRepositoryTagsAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.ListRepositoryTags invocations
func (mmListRepositoryTags *ArtifactPrivateServiceClientMock) ListRepositoryTagsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRepositoryTags.afterListRepositoryTagsCounter)
}

// ListRepositoryTagsBeforeCounter returns a count of ArtifactPrivateServiceClientMock.ListRepositoryTags invocations
func (mmListRepositoryTags *ArtifactPrivateServiceClientMock) ListRepositoryTagsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRepositoryTags.beforeListRepositoryTagsCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.ListRepositoryTags.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListRepositoryTags *mArtifactPrivateServiceClientMockListRepositoryTags) Calls() []*ArtifactPrivateServiceClientMockListRepositoryTagsParams {
	mmListRepositoryTags.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockListRepositoryTagsParams, len(mmListRepositoryTags.callArgs))
	copy(argCopy, mmListRepositoryTags.callArgs)

	mmListRepositoryTags.mutex.RUnlock()

	return argCopy
}

// MinimockListRepositoryTagsDone returns true if the count of the ListRepositoryTags invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockListRepositoryTagsDone() bool {
	if m.ListRepositoryTagsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListRepositoryTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListRepositoryTagsMock.invocationsDone()
}

// MinimockListRepositoryTagsInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockListRepositoryTagsInspect() {
	for _, e := range m.ListRepositoryTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.ListRepositoryTags at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListRepositoryTagsCounter := mm_atomic.LoadUint64(&m.afterListRepositoryTagsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListRepositoryTagsMock.defaultExpectation != nil && afterListRepositoryTagsCounter < 1 {
		if m.ListRepositoryTagsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.ListRepositoryTags at\n%s", m.ListRepositoryTagsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.ListRepositoryTags at\n%s with params: %#v", m.ListRepositoryTagsMock.defaultExpectation.expectationOrigins.origin, *m.ListRepositoryTagsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListRepositoryTags != nil && afterListRepositoryTagsCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.ListRepositoryTags at\n%s", m.funcListRepositoryTagsOrigin)
	}

	if !m.ListRepositoryTagsMock.invocationsDone() && afterListRepositoryTagsCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.ListRepositoryTags at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListRepositoryTagsMock.expectedInvocations), m.ListRepositoryTagsMock.expectedInvocationsOrigin, afterListRepositoryTagsCounter)
	}
}

type mArtifactPrivateServiceClientMockUpdateObject struct {
	optional           bool
	mock               *ArtifactPrivateServiceClientMock
	defaultExpectation *ArtifactPrivateServiceClientMockUpdateObjectExpectation
	expectations       []*ArtifactPrivateServiceClientMockUpdateObjectExpectation

	callArgs []*ArtifactPrivateServiceClientMockUpdateObjectParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ArtifactPrivateServiceClientMockUpdateObjectExpectation specifies expectation struct of the ArtifactPrivateServiceClient.UpdateObject
type ArtifactPrivateServiceClientMockUpdateObjectExpectation struct {
	mock               *ArtifactPrivateServiceClientMock
	params             *ArtifactPrivateServiceClientMockUpdateObjectParams
	paramPtrs          *ArtifactPrivateServiceClientMockUpdateObjectParamPtrs
	expectationOrigins ArtifactPrivateServiceClientMockUpdateObjectExpectationOrigins
	results            *ArtifactPrivateServiceClientMockUpdateObjectResults
	returnOrigin       string
	Counter            uint64
}

// ArtifactPrivateServiceClientMockUpdateObjectParams contains parameters of the ArtifactPrivateServiceClient.UpdateObject
type ArtifactPrivateServiceClientMockUpdateObjectParams struct {
	ctx  context.Context
	in   *mm_artifactv1alpha.UpdateObjectRequest
	opts []grpc.CallOption
}

// ArtifactPrivateServiceClientMockUpdateObjectParamPtrs contains pointers to parameters of the ArtifactPrivateServiceClient.UpdateObject
type ArtifactPrivateServiceClientMockUpdateObjectParamPtrs struct {
	ctx  *context.Context
	in   **mm_artifactv1alpha.UpdateObjectRequest
	opts *[]grpc.CallOption
}

// ArtifactPrivateServiceClientMockUpdateObjectResults contains results of the ArtifactPrivateServiceClient.UpdateObject
type ArtifactPrivateServiceClientMockUpdateObjectResults struct {
	up1 *mm_artifactv1alpha.UpdateObjectResponse
	err error
}

// ArtifactPrivateServiceClientMockUpdateObjectOrigins contains origins of expectations of the ArtifactPrivateServiceClient.UpdateObject
type ArtifactPrivateServiceClientMockUpdateObjectExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Optional() *mArtifactPrivateServiceClientMockUpdateObject {
	mmUpdateObject.optional = true
	return mmUpdateObject
}

// Expect sets up expected params for ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Expect(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockUpdateObject {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	if mmUpdateObject.defaultExpectation == nil {
		mmUpdateObject.defaultExpectation = &ArtifactPrivateServiceClientMockUpdateObjectExpectation{}
	}

	if mmUpdateObject.defaultExpectation.paramPtrs != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by ExpectParams functions")
	}

	mmUpdateObject.defaultExpectation.params = &ArtifactPrivateServiceClientMockUpdateObjectParams{ctx, in, opts}
	mmUpdateObject.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateObject.expectations {
		if minimock.Equal(e.params, mmUpdateObject.defaultExpectation.params) {
			mmUpdateObject.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateObject.defaultExpectation.params)
		}
	}

	return mmUpdateObject
}

// ExpectCtxParam1 sets up expected param ctx for ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) ExpectCtxParam1(ctx context.Context) *mArtifactPrivateServiceClientMockUpdateObject {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	if mmUpdateObject.defaultExpectation == nil {
		mmUpdateObject.defaultExpectation = &ArtifactPrivateServiceClientMockUpdateObjectExpectation{}
	}

	if mmUpdateObject.defaultExpectation.params != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Expect")
	}

	if mmUpdateObject.defaultExpectation.paramPtrs == nil {
		mmUpdateObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockUpdateObjectParamPtrs{}
	}
	mmUpdateObject.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateObject.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateObject
}

// ExpectInParam2 sets up expected param in for ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) ExpectInParam2(in *mm_artifactv1alpha.UpdateObjectRequest) *mArtifactPrivateServiceClientMockUpdateObject {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	if mmUpdateObject.defaultExpectation == nil {
		mmUpdateObject.defaultExpectation = &ArtifactPrivateServiceClientMockUpdateObjectExpectation{}
	}

	if mmUpdateObject.defaultExpectation.params != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Expect")
	}

	if mmUpdateObject.defaultExpectation.paramPtrs == nil {
		mmUpdateObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockUpdateObjectParamPtrs{}
	}
	mmUpdateObject.defaultExpectation.paramPtrs.in = &in
	mmUpdateObject.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmUpdateObject
}

// ExpectOptsParam3 sets up expected param opts for ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) ExpectOptsParam3(opts ...grpc.CallOption) *mArtifactPrivateServiceClientMockUpdateObject {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	if mmUpdateObject.defaultExpectation == nil {
		mmUpdateObject.defaultExpectation = &ArtifactPrivateServiceClientMockUpdateObjectExpectation{}
	}

	if mmUpdateObject.defaultExpectation.params != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Expect")
	}

	if mmUpdateObject.defaultExpectation.paramPtrs == nil {
		mmUpdateObject.defaultExpectation.paramPtrs = &ArtifactPrivateServiceClientMockUpdateObjectParamPtrs{}
	}
	mmUpdateObject.defaultExpectation.paramPtrs.opts = &opts
	mmUpdateObject.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmUpdateObject
}

// Inspect accepts an inspector function that has same arguments as the ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Inspect(f func(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption)) *mArtifactPrivateServiceClientMockUpdateObject {
	if mmUpdateObject.mock.inspectFuncUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("Inspect function is already set for ArtifactPrivateServiceClientMock.UpdateObject")
	}

	mmUpdateObject.mock.inspectFuncUpdateObject = f

	return mmUpdateObject
}

// Return sets up results that will be returned by ArtifactPrivateServiceClient.UpdateObject
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Return(up1 *mm_artifactv1alpha.UpdateObjectResponse, err error) *ArtifactPrivateServiceClientMock {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	if mmUpdateObject.defaultExpectation == nil {
		mmUpdateObject.defaultExpectation = &ArtifactPrivateServiceClientMockUpdateObjectExpectation{mock: mmUpdateObject.mock}
	}
	mmUpdateObject.defaultExpectation.results = &ArtifactPrivateServiceClientMockUpdateObjectResults{up1, err}
	mmUpdateObject.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateObject.mock
}

// Set uses given function f to mock the ArtifactPrivateServiceClient.UpdateObject method
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Set(f func(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption) (up1 *mm_artifactv1alpha.UpdateObjectResponse, err error)) *ArtifactPrivateServiceClientMock {
	if mmUpdateObject.defaultExpectation != nil {
		mmUpdateObject.mock.t.Fatalf("Default expectation is already set for the ArtifactPrivateServiceClient.UpdateObject method")
	}

	if len(mmUpdateObject.expectations) > 0 {
		mmUpdateObject.mock.t.Fatalf("Some expectations are already set for the ArtifactPrivateServiceClient.UpdateObject method")
	}

	mmUpdateObject.mock.funcUpdateObject = f
	mmUpdateObject.mock.funcUpdateObjectOrigin = minimock.CallerInfo(1)
	return mmUpdateObject.mock
}

// When sets expectation for the ArtifactPrivateServiceClient.UpdateObject which will trigger the result defined by the following
// Then helper
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) When(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption) *ArtifactPrivateServiceClientMockUpdateObjectExpectation {
	if mmUpdateObject.mock.funcUpdateObject != nil {
		mmUpdateObject.mock.t.Fatalf("ArtifactPrivateServiceClientMock.UpdateObject mock is already set by Set")
	}

	expectation := &ArtifactPrivateServiceClientMockUpdateObjectExpectation{
		mock:               mmUpdateObject.mock,
		params:             &ArtifactPrivateServiceClientMockUpdateObjectParams{ctx, in, opts},
		expectationOrigins: ArtifactPrivateServiceClientMockUpdateObjectExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateObject.expectations = append(mmUpdateObject.expectations, expectation)
	return expectation
}

// Then sets up ArtifactPrivateServiceClient.UpdateObject return parameters for the expectation previously defined by the When method
func (e *ArtifactPrivateServiceClientMockUpdateObjectExpectation) Then(up1 *mm_artifactv1alpha.UpdateObjectResponse, err error) *ArtifactPrivateServiceClientMock {
	e.results = &ArtifactPrivateServiceClientMockUpdateObjectResults{up1, err}
	return e.mock
}

// Times sets number of times ArtifactPrivateServiceClient.UpdateObject should be invoked
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Times(n uint64) *mArtifactPrivateServiceClientMockUpdateObject {
	if n == 0 {
		mmUpdateObject.mock.t.Fatalf("Times of ArtifactPrivateServiceClientMock.UpdateObject mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateObject.expectedInvocations, n)
	mmUpdateObject.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateObject
}

func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) invocationsDone() bool {
	if len(mmUpdateObject.expectations) == 0 && mmUpdateObject.defaultExpectation == nil && mmUpdateObject.mock.funcUpdateObject == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateObject.mock.afterUpdateObjectCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateObject.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateObject implements mm_artifactv1alpha.ArtifactPrivateServiceClient
func (mmUpdateObject *ArtifactPrivateServiceClientMock) UpdateObject(ctx context.Context, in *mm_artifactv1alpha.UpdateObjectRequest, opts ...grpc.CallOption) (up1 *mm_artifactv1alpha.UpdateObjectResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateObject.beforeUpdateObjectCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateObject.afterUpdateObjectCounter, 1)

	mmUpdateObject.t.Helper()

	if mmUpdateObject.inspectFuncUpdateObject != nil {
		mmUpdateObject.inspectFuncUpdateObject(ctx, in, opts...)
	}

	mm_params := ArtifactPrivateServiceClientMockUpdateObjectParams{ctx, in, opts}

	// Record call args
	mmUpdateObject.UpdateObjectMock.mutex.Lock()
	mmUpdateObject.UpdateObjectMock.callArgs = append(mmUpdateObject.UpdateObjectMock.callArgs, &mm_params)
	mmUpdateObject.UpdateObjectMock.mutex.Unlock()

	for _, e := range mmUpdateObject.UpdateObjectMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmUpdateObject.UpdateObjectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateObject.UpdateObjectMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateObject.UpdateObjectMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateObject.UpdateObjectMock.defaultExpectation.paramPtrs

		mm_got := ArtifactPrivateServiceClientMockUpdateObjectParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateObject.t.Errorf("ArtifactPrivateServiceClientMock.UpdateObject got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateObject.UpdateObjectMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmUpdateObject.t.Errorf("ArtifactPrivateServiceClientMock.UpdateObject got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateObject.UpdateObjectMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmUpdateObject.t.Errorf("ArtifactPrivateServiceClientMock.UpdateObject got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateObject.UpdateObjectMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateObject.t.Errorf("ArtifactPrivateServiceClientMock.UpdateObject got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateObject.UpdateObjectMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateObject.UpdateObjectMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateObject.t.Fatal("No results are set for the ArtifactPrivateServiceClientMock.UpdateObject")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmUpdateObject.funcUpdateObject != nil {
		return mmUpdateObject.funcUpdateObject(ctx, in, opts...)
	}
	mmUpdateObject.t.Fatalf("Unexpected call to ArtifactPrivateServiceClientMock.UpdateObject. %v %v %v", ctx, in, opts)
	return
}

// UpdateObjectAfterCounter returns a count of finished ArtifactPrivateServiceClientMock.UpdateObject invocations
func (mmUpdateObject *ArtifactPrivateServiceClientMock) UpdateObjectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateObject.afterUpdateObjectCounter)
}

// UpdateObjectBeforeCounter returns a count of ArtifactPrivateServiceClientMock.UpdateObject invocations
func (mmUpdateObject *ArtifactPrivateServiceClientMock) UpdateObjectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateObject.beforeUpdateObjectCounter)
}

// Calls returns a list of arguments used in each call to ArtifactPrivateServiceClientMock.UpdateObject.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateObject *mArtifactPrivateServiceClientMockUpdateObject) Calls() []*ArtifactPrivateServiceClientMockUpdateObjectParams {
	mmUpdateObject.mutex.RLock()

	argCopy := make([]*ArtifactPrivateServiceClientMockUpdateObjectParams, len(mmUpdateObject.callArgs))
	copy(argCopy, mmUpdateObject.callArgs)

	mmUpdateObject.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateObjectDone returns true if the count of the UpdateObject invocations corresponds
// the number of defined expectations
func (m *ArtifactPrivateServiceClientMock) MinimockUpdateObjectDone() bool {
	if m.UpdateObjectMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateObjectMock.invocationsDone()
}

// MinimockUpdateObjectInspect logs each unmet expectation
func (m *ArtifactPrivateServiceClientMock) MinimockUpdateObjectInspect() {
	for _, e := range m.UpdateObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.UpdateObject at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateObjectCounter := mm_atomic.LoadUint64(&m.afterUpdateObjectCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateObjectMock.defaultExpectation != nil && afterUpdateObjectCounter < 1 {
		if m.UpdateObjectMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.UpdateObject at\n%s", m.UpdateObjectMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.UpdateObject at\n%s with params: %#v", m.UpdateObjectMock.defaultExpectation.expectationOrigins.origin, *m.UpdateObjectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateObject != nil && afterUpdateObjectCounter < 1 {
		m.t.Errorf("Expected call to ArtifactPrivateServiceClientMock.UpdateObject at\n%s", m.funcUpdateObjectOrigin)
	}

	if !m.UpdateObjectMock.invocationsDone() && afterUpdateObjectCounter > 0 {
		m.t.Errorf("Expected %d calls to ArtifactPrivateServiceClientMock.UpdateObject at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateObjectMock.expectedInvocations), m.UpdateObjectMock.expectedInvocationsOrigin, afterUpdateObjectCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ArtifactPrivateServiceClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateRepositoryTagInspect()

			m.MinimockDeleteRepositoryTagInspect()

			m.MinimockGetChatFileInspect()

			m.MinimockGetFileAsMarkdownInspect()

			m.MinimockGetObjectInspect()

			m.MinimockGetObjectURLInspect()

			m.MinimockGetRepositoryTagInspect()

			m.MinimockListRepositoryTagsInspect()

			m.MinimockUpdateObjectInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ArtifactPrivateServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ArtifactPrivateServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateRepositoryTagDone() &&
		m.MinimockDeleteRepositoryTagDone() &&
		m.MinimockGetChatFileDone() &&
		m.MinimockGetFileAsMarkdownDone() &&
		m.MinimockGetObjectDone() &&
		m.MinimockGetObjectURLDone() &&
		m.MinimockGetRepositoryTagDone() &&
		m.MinimockListRepositoryTagsDone() &&
		m.MinimockUpdateObjectDone()
}
