// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ray_server.proto

package rayserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RayServeAPIService_ListApplications_FullMethodName = "/ray.serve.RayServeAPIService/ListApplications"
	RayServeAPIService_Healthz_FullMethodName          = "/ray.serve.RayServeAPIService/Healthz"
)

// RayServeAPIServiceClient is the client API for RayServeAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServeAPIServiceClient interface {
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type rayServeAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServeAPIServiceClient(cc grpc.ClientConnInterface) RayServeAPIServiceClient {
	return &rayServeAPIServiceClient{cc}
}

func (c *rayServeAPIServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, RayServeAPIService_ListApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServeAPIServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, RayServeAPIService_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServeAPIServiceServer is the server API for RayServeAPIService service.
// All implementations must embed UnimplementedRayServeAPIServiceServer
// for forward compatibility
type RayServeAPIServiceServer interface {
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	mustEmbedUnimplementedRayServeAPIServiceServer()
}

// UnimplementedRayServeAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRayServeAPIServiceServer struct {
}

func (UnimplementedRayServeAPIServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedRayServeAPIServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedRayServeAPIServiceServer) mustEmbedUnimplementedRayServeAPIServiceServer() {}

// UnsafeRayServeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServeAPIServiceServer will
// result in compilation errors.
type UnsafeRayServeAPIServiceServer interface {
	mustEmbedUnimplementedRayServeAPIServiceServer()
}

func RegisterRayServeAPIServiceServer(s grpc.ServiceRegistrar, srv RayServeAPIServiceServer) {
	s.RegisterService(&RayServeAPIService_ServiceDesc, srv)
}

func _RayServeAPIService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeAPIServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeAPIService_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeAPIServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayServeAPIService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeAPIServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeAPIService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeAPIServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RayServeAPIService_ServiceDesc is the grpc.ServiceDesc for RayServeAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayServeAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.RayServeAPIService",
	HandlerType: (*RayServeAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _RayServeAPIService_ListApplications_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _RayServeAPIService_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ray_server.proto",
}
