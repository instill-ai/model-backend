// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ray.proto

package rayserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RayService_XCall___FullMethodName = "/ray.v1.RayService/__call__"
)

// RayServiceClient is the client API for RayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServiceClient interface {
	// Trigger method is the defaut trigger entry for ray deployment
	XCall__(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
}

type rayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServiceClient(cc grpc.ClientConnInterface) RayServiceClient {
	return &rayServiceClient{cc}
}

func (c *rayServiceClient) XCall__(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, RayService_XCall___FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServiceServer is the server API for RayService service.
// All implementations must embed UnimplementedRayServiceServer
// for forward compatibility
type RayServiceServer interface {
	// Trigger method is the defaut trigger entry for ray deployment
	XCall__(context.Context, *CallRequest) (*CallResponse, error)
	mustEmbedUnimplementedRayServiceServer()
}

// UnimplementedRayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRayServiceServer struct {
}

func (UnimplementedRayServiceServer) XCall__(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XCall__ not implemented")
}
func (UnimplementedRayServiceServer) mustEmbedUnimplementedRayServiceServer() {}

// UnsafeRayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServiceServer will
// result in compilation errors.
type UnsafeRayServiceServer interface {
	mustEmbedUnimplementedRayServiceServer()
}

func RegisterRayServiceServer(s grpc.ServiceRegistrar, srv RayServiceServer) {
	s.RegisterService(&RayService_ServiceDesc, srv)
}

func _RayService_XCall___Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServiceServer).XCall__(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayService_XCall___FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServiceServer).XCall__(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RayService_ServiceDesc is the grpc.ServiceDesc for RayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.v1.RayService",
	HandlerType: (*RayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "__call__",
			Handler:    _RayService_XCall___Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ray.proto",
}
