// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ray.proto

package rayserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RayService_ModelReady_FullMethodName    = "/ray.serve.RayService/ModelReady"
	RayService_ModelMetadata_FullMethodName = "/ray.serve.RayService/ModelMetadata"
	RayService_ModelInfer_FullMethodName    = "/ray.serve.RayService/ModelInfer"
)

// RayServiceClient is the client API for RayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServiceClient interface {
	// ModelReady method receives a ModelReadyRequest message and
	// returns a ModelReadyResponse
	ModelReady(ctx context.Context, in *ModelReadyRequest, opts ...grpc.CallOption) (*ModelReadyResponse, error)
	// ModelMetadata method receives a ModelMetadataRequest message and
	// returns a ModelMetadataResponse
	ModelMetadata(ctx context.Context, in *ModelMetadataRequest, opts ...grpc.CallOption) (*ModelMetadataResponse, error)
	// ModelInfer method receives a ModelInferRequest message and
	// returns a ModelInferResponse
	ModelInfer(ctx context.Context, in *ModelInferRequest, opts ...grpc.CallOption) (*ModelInferResponse, error)
}

type rayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServiceClient(cc grpc.ClientConnInterface) RayServiceClient {
	return &rayServiceClient{cc}
}

func (c *rayServiceClient) ModelReady(ctx context.Context, in *ModelReadyRequest, opts ...grpc.CallOption) (*ModelReadyResponse, error) {
	out := new(ModelReadyResponse)
	err := c.cc.Invoke(ctx, RayService_ModelReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServiceClient) ModelMetadata(ctx context.Context, in *ModelMetadataRequest, opts ...grpc.CallOption) (*ModelMetadataResponse, error) {
	out := new(ModelMetadataResponse)
	err := c.cc.Invoke(ctx, RayService_ModelMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServiceClient) ModelInfer(ctx context.Context, in *ModelInferRequest, opts ...grpc.CallOption) (*ModelInferResponse, error) {
	out := new(ModelInferResponse)
	err := c.cc.Invoke(ctx, RayService_ModelInfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServiceServer is the server API for RayService service.
// All implementations must embed UnimplementedRayServiceServer
// for forward compatibility
type RayServiceServer interface {
	// ModelReady method receives a ModelReadyRequest message and
	// returns a ModelReadyResponse
	ModelReady(context.Context, *ModelReadyRequest) (*ModelReadyResponse, error)
	// ModelMetadata method receives a ModelMetadataRequest message and
	// returns a ModelMetadataResponse
	ModelMetadata(context.Context, *ModelMetadataRequest) (*ModelMetadataResponse, error)
	// ModelInfer method receives a ModelInferRequest message and
	// returns a ModelInferResponse
	ModelInfer(context.Context, *ModelInferRequest) (*ModelInferResponse, error)
	mustEmbedUnimplementedRayServiceServer()
}

// UnimplementedRayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRayServiceServer struct {
}

func (UnimplementedRayServiceServer) ModelReady(context.Context, *ModelReadyRequest) (*ModelReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelReady not implemented")
}
func (UnimplementedRayServiceServer) ModelMetadata(context.Context, *ModelMetadataRequest) (*ModelMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelMetadata not implemented")
}
func (UnimplementedRayServiceServer) ModelInfer(context.Context, *ModelInferRequest) (*ModelInferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelInfer not implemented")
}
func (UnimplementedRayServiceServer) mustEmbedUnimplementedRayServiceServer() {}

// UnsafeRayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServiceServer will
// result in compilation errors.
type UnsafeRayServiceServer interface {
	mustEmbedUnimplementedRayServiceServer()
}

func RegisterRayServiceServer(s grpc.ServiceRegistrar, srv RayServiceServer) {
	s.RegisterService(&RayService_ServiceDesc, srv)
}

func _RayService_ModelReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServiceServer).ModelReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayService_ModelReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServiceServer).ModelReady(ctx, req.(*ModelReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayService_ModelMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServiceServer).ModelMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayService_ModelMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServiceServer).ModelMetadata(ctx, req.(*ModelMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayService_ModelInfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServiceServer).ModelInfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayService_ModelInfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServiceServer).ModelInfer(ctx, req.(*ModelInferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RayService_ServiceDesc is the grpc.ServiceDesc for RayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.RayService",
	HandlerType: (*RayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModelReady",
			Handler:    _RayService_ModelReady_Handler,
		},
		{
			MethodName: "ModelMetadata",
			Handler:    _RayService_ModelMetadata_Handler,
		},
		{
			MethodName: "ModelInfer",
			Handler:    _RayService_ModelInfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ray.proto",
}
