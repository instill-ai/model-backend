// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/model-backend/pkg/ray (interfaces: Ray)

// Package worker_test is a generated GoMock package.
package worker_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ray "github.com/instill-ai/model-backend/pkg/ray"
	rayserver "github.com/instill-ai/model-backend/pkg/ray/rayserver"
	taskv1alpha "github.com/instill-ai/protogen-go/common/task/v1alpha"
	modelv1alpha "github.com/instill-ai/protogen-go/model/model/v1alpha"
)

// MockRay is a mock of Ray interface.
type MockRay struct {
	ctrl     *gomock.Controller
	recorder *MockRayMockRecorder
}

// MockRayMockRecorder is the mock recorder for MockRay.
type MockRayMockRecorder struct {
	mock *MockRay
}

// NewMockRay creates a new mock instance.
func NewMockRay(ctrl *gomock.Controller) *MockRay {
	mock := &MockRay{ctrl: ctrl}
	mock.recorder = &MockRayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRay) EXPECT() *MockRayMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRay) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRayMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRay)(nil).Close))
}

// Init mocks base method.
func (m *MockRay) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockRayMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRay)(nil).Init))
}

// IsRayServerReady mocks base method.
func (m *MockRay) IsRayServerReady(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRayServerReady", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRayServerReady indicates an expected call of IsRayServerReady.
func (mr *MockRayMockRecorder) IsRayServerReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRayServerReady", reflect.TypeOf((*MockRay)(nil).IsRayServerReady), arg0)
}

// ModelInferRequest mocks base method.
func (m *MockRay) ModelInferRequest(arg0 context.Context, arg1 taskv1alpha.Task, arg2 ray.InferInput, arg3, arg4 string, arg5 *rayserver.ModelMetadataResponse) (*rayserver.RayServiceCallResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInferRequest", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*rayserver.RayServiceCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInferRequest indicates an expected call of ModelInferRequest.
func (mr *MockRayMockRecorder) ModelInferRequest(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInferRequest", reflect.TypeOf((*MockRay)(nil).ModelInferRequest), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ModelMetadataRequest mocks base method.
func (m *MockRay) ModelMetadataRequest(arg0 context.Context, arg1, arg2 string) *rayserver.ModelMetadataResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadataRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*rayserver.ModelMetadataResponse)
	return ret0
}

// ModelMetadataRequest indicates an expected call of ModelMetadataRequest.
func (mr *MockRayMockRecorder) ModelMetadataRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadataRequest", reflect.TypeOf((*MockRay)(nil).ModelMetadataRequest), arg0, arg1, arg2)
}

// ModelReady mocks base method.
func (m *MockRay) ModelReady(arg0 context.Context, arg1, arg2 string) (*modelv1alpha.State, string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelReady", arg0, arg1, arg2)
	ret0, _ := ret[0].(*modelv1alpha.State)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ModelReady indicates an expected call of ModelReady.
func (mr *MockRayMockRecorder) ModelReady(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelReady", reflect.TypeOf((*MockRay)(nil).ModelReady), arg0, arg1, arg2)
}

// UpdateContainerizedModel mocks base method.
func (m *MockRay) UpdateContainerizedModel(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 ray.Action, arg7 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerizedModel", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerizedModel indicates an expected call of UpdateContainerizedModel.
func (mr *MockRayMockRecorder) UpdateContainerizedModel(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerizedModel", reflect.TypeOf((*MockRay)(nil).UpdateContainerizedModel), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
