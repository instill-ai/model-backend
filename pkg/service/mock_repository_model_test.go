// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/model.go

// Package services is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/instill-ai/model-backend/pkg/datamodel"
)

// MockModelRepository is a mock of ModelRepository interface.
type MockModelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModelRepositoryMockRecorder
}

// MockModelRepositoryMockRecorder is the mock recorder for MockModelRepository.
type MockModelRepositoryMockRecorder struct {
	mock *MockModelRepository
}

// NewMockModelRepository creates a new mock instance.
func NewMockModelRepository(ctrl *gomock.Controller) *MockModelRepository {
	mock := &MockModelRepository{ctrl: ctrl}
	mock.recorder = &MockModelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRepository) EXPECT() *MockModelRepositoryMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelRepository) CreateModel(model models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelRepositoryMockRecorder) CreateModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelRepository)(nil).CreateModel), model)
}

// CreateTModel mocks base method.
func (m *MockModelRepository) CreateTModel(model models.TModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTModel", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTModel indicates an expected call of CreateTModel.
func (mr *MockModelRepositoryMockRecorder) CreateTModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTModel", reflect.TypeOf((*MockModelRepository)(nil).CreateTModel), model)
}

// CreateVersion mocks base method.
func (m *MockModelRepository) CreateVersion(version models.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockModelRepositoryMockRecorder) CreateVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockModelRepository)(nil).CreateVersion), version)
}

// DeleteModel mocks base method.
func (m *MockModelRepository) DeleteModel(modelId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", modelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelRepositoryMockRecorder) DeleteModel(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelRepository)(nil).DeleteModel), modelId)
}

// DeleteModelVersion mocks base method.
func (m *MockModelRepository) DeleteModelVersion(modelId, version uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", modelId, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockModelRepositoryMockRecorder) DeleteModelVersion(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockModelRepository)(nil).DeleteModelVersion), modelId, version)
}

// GetModelByName mocks base method.
func (m *MockModelRepository) GetModelByName(namespace, modelName string) (models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", namespace, modelName)
	ret0, _ := ret[0].(models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockModelRepositoryMockRecorder) GetModelByName(namespace, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockModelRepository)(nil).GetModelByName), namespace, modelName)
}

// GetModelVersion mocks base method.
func (m *MockModelRepository) GetModelVersion(modelId, version uint64) (models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", modelId, version)
	ret0, _ := ret[0].(models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockModelRepositoryMockRecorder) GetModelVersion(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockModelRepository)(nil).GetModelVersion), modelId, version)
}

// GetModelVersionLatest mocks base method.
func (m *MockModelRepository) GetModelVersionLatest(modelId uint64) (models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionLatest", modelId)
	ret0, _ := ret[0].(models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersionLatest indicates an expected call of GetModelVersionLatest.
func (mr *MockModelRepositoryMockRecorder) GetModelVersionLatest(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionLatest", reflect.TypeOf((*MockModelRepository)(nil).GetModelVersionLatest), modelId)
}

// GetModelVersions mocks base method.
func (m *MockModelRepository) GetModelVersions(modelId uint64) ([]models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersions", modelId)
	ret0, _ := ret[0].([]models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersions indicates an expected call of GetModelVersions.
func (mr *MockModelRepositoryMockRecorder) GetModelVersions(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersions", reflect.TypeOf((*MockModelRepository)(nil).GetModelVersions), modelId)
}

// GetTEnsembleModel mocks base method.
func (m *MockModelRepository) GetTEnsembleModel(modelId, version uint64) (models.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTEnsembleModel", modelId, version)
	ret0, _ := ret[0].(models.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTEnsembleModel indicates an expected call of GetTEnsembleModel.
func (mr *MockModelRepositoryMockRecorder) GetTEnsembleModel(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTEnsembleModel", reflect.TypeOf((*MockModelRepository)(nil).GetTEnsembleModel), modelId, version)
}

// GetTModelVersions mocks base method.
func (m *MockModelRepository) GetTModelVersions(modelId, version uint64) ([]models.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModelVersions", modelId, version)
	ret0, _ := ret[0].([]models.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModelVersions indicates an expected call of GetTModelVersions.
func (mr *MockModelRepositoryMockRecorder) GetTModelVersions(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModelVersions", reflect.TypeOf((*MockModelRepository)(nil).GetTModelVersions), modelId, version)
}

// GetTModels mocks base method.
func (m *MockModelRepository) GetTModels(modelId uint64) ([]models.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModels", modelId)
	ret0, _ := ret[0].([]models.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModels indicates an expected call of GetTModels.
func (mr *MockModelRepositoryMockRecorder) GetTModels(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModels", reflect.TypeOf((*MockModelRepository)(nil).GetTModels), modelId)
}

// ListModels mocks base method.
func (m *MockModelRepository) ListModels(query models.ListModelQuery) ([]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", query)
	ret0, _ := ret[0].([]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockModelRepositoryMockRecorder) ListModels(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockModelRepository)(nil).ListModels), query)
}

// UpdateModelMetaData mocks base method.
func (m *MockModelRepository) UpdateModelMetaData(modelId uint64, updatedModel models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelMetaData", modelId, updatedModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelMetaData indicates an expected call of UpdateModelMetaData.
func (mr *MockModelRepositoryMockRecorder) UpdateModelMetaData(modelId, updatedModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelMetaData", reflect.TypeOf((*MockModelRepository)(nil).UpdateModelMetaData), modelId, updatedModel)
}

// UpdateModelVersion mocks base method.
func (m *MockModelRepository) UpdateModelVersion(modelId, modelVersion uint64, versionInfo models.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", modelId, modelVersion, versionInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockModelRepositoryMockRecorder) UpdateModelVersion(modelId, modelVersion, versionInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockModelRepository)(nil).UpdateModelVersion), modelId, modelVersion, versionInfo)
}
