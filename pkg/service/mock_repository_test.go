// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/model.go

// Package services is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	"github.com/instill-ai/model-backend/pkg/datamodel"
)

// MockRepository is a mock of ModelRepository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockRepository) CreateModel(model datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockRepositoryMockRecorder) CreateModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockRepository)(nil).CreateModel), model)
}

// CreateTModel mocks base method.
func (m *MockRepository) CreateTModel(tmodel datamodel.TModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTModel", tmodel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTModel indicates an expected call of CreateTModel.
func (mr *MockRepositoryMockRecorder) CreateTModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTModel", reflect.TypeOf((*MockRepository)(nil).CreateTModel), model)
}

// CreateVersion mocks base method.
func (m *MockRepository) CreateVersion(version datamodel.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockRepositoryMockRecorder) CreateVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockRepository)(nil).CreateVersion), version)
}

// DeleteModel mocks base method.
func (m *MockRepository) DeleteModel(modelId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", modelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockRepositoryMockRecorder) DeleteModel(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockRepository)(nil).DeleteModel), modelId)
}

// DeleteModelVersion mocks base method.
func (m *MockRepository) DeleteModelVersion(modelId, version uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", modelId, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockRepositoryMockRecorder) DeleteModelVersion(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockRepository)(nil).DeleteModelVersion), modelId, version)
}

// GetModelByName mocks base method.
func (m *MockRepository) GetModelByName(namespace, modelName string) (datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", namespace, modelName)
	ret0, _ := ret[0].(datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockRepositoryMockRecorder) GetModelByName(namespace, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockRepository)(nil).GetModelByName), namespace, modelName)
}

// GetModelVersion mocks base method.
func (m *MockRepository) GetModelVersion(modelId, version uint64) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", modelId, version)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockRepositoryMockRecorder) GetModelVersion(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockRepository)(nil).GetModelVersion), modelId, version)
}

// GetModelVersionLatest mocks base method.
func (m *MockRepository) GetModelVersionLatest(modelId uint64) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionLatest", modelId)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersionLatest indicates an expected call of GetModelVersionLatest.
func (mr *MockRepositoryMockRecorder) GetModelVersionLatest(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionLatest", reflect.TypeOf((*MockRepository)(nil).GetModelVersionLatest), modelId)
}

// GetModelVersions mocks base method.
func (m *MockRepository) GetModelVersions(modelId uint64) ([]datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersions", modelId)
	ret0, _ := ret[0].([]datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersions indicates an expected call of GetModelVersions.
func (mr *MockRepositoryMockRecorder) GetModelVersions(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersions", reflect.TypeOf((*MockRepository)(nil).GetModelVersions), modelId)
}

// GetTEnsembleModel mocks base method.
func (m *MockRepository) GetTEnsembleModel(modelId, version uint64) (datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTEnsembleModel", modelId, version)
	ret0, _ := ret[0].(datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTEnsembleModel indicates an expected call of GetTEnsembleModel.
func (mr *MockRepositoryMockRecorder) GetTEnsembleModel(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTEnsembleModel", reflect.TypeOf((*MockRepository)(nil).GetTEnsembleModel), modelId, version)
}

// GetTModelVersions mocks base method.
func (m *MockRepository) GetTModelVersions(modelId, version uint64) ([]datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModelVersions", modelId, version)
	ret0, _ := ret[0].([]datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModelVersions indicates an expected call of GetTModelVersions.
func (mr *MockRepositoryMockRecorder) GetTModelVersions(modelId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModelVersions", reflect.TypeOf((*MockRepository)(nil).GetTModelVersions), modelId, version)
}

// GetTModels mocks base method.
func (m *MockRepository) GetTModels(modelId uint64) ([]datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModels", modelId)
	ret0, _ := ret[0].([]datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModels indicates an expected call of GetTModels.
func (mr *MockRepositoryMockRecorder) GetTModels(modelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModels", reflect.TypeOf((*MockRepository)(nil).GetTModels), modelId)
}

// ListModels mocks base method.
func (m *MockRepository) ListModels(query datamodel.ListModelQuery) ([]datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", query)
	ret0, _ := ret[0].([]datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockRepositoryMockRecorder) ListModels(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockRepository)(nil).ListModels), query)
}

// UpdateModelMetaData mocks base method.
func (m *MockRepository) UpdateModelMetaData(modelId uint64, updatedModel datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelMetaData", modelId, updatedModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelMetaData indicates an expected call of UpdateModelMetaData.
func (mr *MockRepositoryMockRecorder) UpdateModelMetaData(modelId, updatedModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelMetaData", reflect.TypeOf((*MockRepository)(nil).UpdateModelMetaData), modelId, updatedModel)
}

// UpdateModelVersion mocks base method.
func (m *MockRepository) UpdateModelVersion(modelId, modelVersion uint64, version datamodel.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", modelId, modelVersion, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockRepositoryMockRecorder) UpdateModelVersion(modelId, modelVersion, versionInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockRepository)(nil).UpdateModelVersion), modelId, modelVersion, versionInfo)
}
