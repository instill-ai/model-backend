// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/model-backend/pkg/repository (interfaces: Repository)

// Package service_test is a generated GoMock package.
package service_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datamodel "github.com/instill-ai/model-backend/pkg/datamodel"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockRepository) CreateModel(arg0 datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockRepositoryMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockRepository)(nil).CreateModel), arg0)
}

// CreateTModel mocks base method.
func (m *MockRepository) CreateTModel(arg0 datamodel.TModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTModel indicates an expected call of CreateTModel.
func (mr *MockRepositoryMockRecorder) CreateTModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTModel", reflect.TypeOf((*MockRepository)(nil).CreateTModel), arg0)
}

// CreateVersion mocks base method.
func (m *MockRepository) CreateVersion(arg0 datamodel.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockRepositoryMockRecorder) CreateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockRepository)(nil).CreateVersion), arg0)
}

// DeleteModel mocks base method.
func (m *MockRepository) DeleteModel(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockRepositoryMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockRepository)(nil).DeleteModel), arg0)
}

// DeleteModelVersion mocks base method.
func (m *MockRepository) DeleteModelVersion(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockRepositoryMockRecorder) DeleteModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockRepository)(nil).DeleteModelVersion), arg0, arg1)
}

// GetModelByName mocks base method.
func (m *MockRepository) GetModelByName(arg0, arg1 string) (datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockRepositoryMockRecorder) GetModelByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockRepository)(nil).GetModelByName), arg0, arg1)
}

// GetModelVersion mocks base method.
func (m *MockRepository) GetModelVersion(arg0, arg1 uint64) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockRepositoryMockRecorder) GetModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockRepository)(nil).GetModelVersion), arg0, arg1)
}

// GetModelVersionLatest mocks base method.
func (m *MockRepository) GetModelVersionLatest(arg0 uint64) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionLatest", arg0)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersionLatest indicates an expected call of GetModelVersionLatest.
func (mr *MockRepositoryMockRecorder) GetModelVersionLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionLatest", reflect.TypeOf((*MockRepository)(nil).GetModelVersionLatest), arg0)
}

// GetModelVersions mocks base method.
func (m *MockRepository) GetModelVersions(arg0 uint64) ([]datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersions", arg0)
	ret0, _ := ret[0].([]datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersions indicates an expected call of GetModelVersions.
func (mr *MockRepositoryMockRecorder) GetModelVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersions", reflect.TypeOf((*MockRepository)(nil).GetModelVersions), arg0)
}

// GetTEnsembleModel mocks base method.
func (m *MockRepository) GetTEnsembleModel(arg0, arg1 uint64) (datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTEnsembleModel", arg0, arg1)
	ret0, _ := ret[0].(datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTEnsembleModel indicates an expected call of GetTEnsembleModel.
func (mr *MockRepositoryMockRecorder) GetTEnsembleModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTEnsembleModel", reflect.TypeOf((*MockRepository)(nil).GetTEnsembleModel), arg0, arg1)
}

// GetTModelVersions mocks base method.
func (m *MockRepository) GetTModelVersions(arg0, arg1 uint64) ([]datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModelVersions", arg0, arg1)
	ret0, _ := ret[0].([]datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModelVersions indicates an expected call of GetTModelVersions.
func (mr *MockRepositoryMockRecorder) GetTModelVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModelVersions", reflect.TypeOf((*MockRepository)(nil).GetTModelVersions), arg0, arg1)
}

// GetTModels mocks base method.
func (m *MockRepository) GetTModels(arg0 uint64) ([]datamodel.TModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTModels", arg0)
	ret0, _ := ret[0].([]datamodel.TModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTModels indicates an expected call of GetTModels.
func (mr *MockRepositoryMockRecorder) GetTModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTModels", reflect.TypeOf((*MockRepository)(nil).GetTModels), arg0)
}

// ListModels mocks base method.
func (m *MockRepository) ListModels(arg0 datamodel.ListModelQuery) ([]datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].([]datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockRepositoryMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockRepository)(nil).ListModels), arg0)
}

// UpdateModelMetaData mocks base method.
func (m *MockRepository) UpdateModelMetaData(arg0 uint64, arg1 datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelMetaData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelMetaData indicates an expected call of UpdateModelMetaData.
func (mr *MockRepositoryMockRecorder) UpdateModelMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelMetaData", reflect.TypeOf((*MockRepository)(nil).UpdateModelMetaData), arg0, arg1)
}

// UpdateModelVersion mocks base method.
func (m *MockRepository) UpdateModelVersion(arg0, arg1 uint64, arg2 datamodel.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockRepositoryMockRecorder) UpdateModelVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockRepository)(nil).UpdateModelVersion), arg0, arg1, arg2)
}
