// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/model-backend/pkg/repository (interfaces: Repository)

// Package service_test is a generated GoMock package.
package service_test

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	datamodel "github.com/instill-ai/model-backend/pkg/datamodel"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method.
func (m *MockRepository) CreateInstance(arg0 datamodel.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockRepositoryMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockRepository)(nil).CreateInstance), arg0)
}

// CreateModel mocks base method.
func (m *MockRepository) CreateModel(arg0 datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockRepositoryMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockRepository)(nil).CreateModel), arg0)
}

// CreateTModel mocks base method.
func (m *MockRepository) CreateTModel(arg0 datamodel.TritonModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTModel indicates an expected call of CreateTModel.
func (mr *MockRepositoryMockRecorder) CreateTModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTModel", reflect.TypeOf((*MockRepository)(nil).CreateTModel), arg0)
}

// DeleteModel mocks base method.
func (m *MockRepository) DeleteModel(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockRepositoryMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockRepository)(nil).DeleteModel), arg0)
}

// DeleteModelInstance mocks base method.
func (m *MockRepository) DeleteModelInstance(arg0 uuid.UUID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelInstance indicates an expected call of DeleteModelInstance.
func (mr *MockRepositoryMockRecorder) DeleteModelInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelInstance", reflect.TypeOf((*MockRepository)(nil).DeleteModelInstance), arg0, arg1)
}

// GetModelByName mocks base method.
func (m *MockRepository) GetModelByName(arg0, arg1 string) (datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockRepositoryMockRecorder) GetModelByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockRepository)(nil).GetModelByName), arg0, arg1)
}

// GetModelInstance mocks base method.
func (m *MockRepository) GetModelInstance(arg0 uuid.UUID, arg1 string) (datamodel.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInstance", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInstance indicates an expected call of GetModelInstance.
func (mr *MockRepositoryMockRecorder) GetModelInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInstance", reflect.TypeOf((*MockRepository)(nil).GetModelInstance), arg0, arg1)
}

// GetModelInstanceLatest mocks base method.
func (m *MockRepository) GetModelInstanceLatest(arg0 uuid.UUID) (datamodel.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInstanceLatest", arg0)
	ret0, _ := ret[0].(datamodel.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInstanceLatest indicates an expected call of GetModelInstanceLatest.
func (mr *MockRepositoryMockRecorder) GetModelInstanceLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInstanceLatest", reflect.TypeOf((*MockRepository)(nil).GetModelInstanceLatest), arg0)
}

// GetModelInstances mocks base method.
func (m *MockRepository) GetModelInstances(arg0 uuid.UUID) ([]datamodel.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInstances", arg0)
	ret0, _ := ret[0].([]datamodel.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInstances indicates an expected call of GetModelInstances.
func (mr *MockRepositoryMockRecorder) GetModelInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInstances", reflect.TypeOf((*MockRepository)(nil).GetModelInstances), arg0)
}

// GetTritonEnsembleModel mocks base method.
func (m *MockRepository) GetTritonEnsembleModel(arg0 uuid.UUID, arg1 string) (datamodel.TritonModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTritonEnsembleModel", arg0, arg1)
	ret0, _ := ret[0].(datamodel.TritonModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTritonEnsembleModel indicates an expected call of GetTritonEnsembleModel.
func (mr *MockRepositoryMockRecorder) GetTritonEnsembleModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTritonEnsembleModel", reflect.TypeOf((*MockRepository)(nil).GetTritonEnsembleModel), arg0, arg1)
}

// GetTritonModelVersions mocks base method.
func (m *MockRepository) GetTritonModelVersions(arg0 uuid.UUID, arg1 string) ([]datamodel.TritonModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTritonModelVersions", arg0, arg1)
	ret0, _ := ret[0].([]datamodel.TritonModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTritonModelVersions indicates an expected call of GetTritonModelVersions.
func (mr *MockRepositoryMockRecorder) GetTritonModelVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTritonModelVersions", reflect.TypeOf((*MockRepository)(nil).GetTritonModelVersions), arg0, arg1)
}

// GetTritonModels mocks base method.
func (m *MockRepository) GetTritonModels(arg0 uuid.UUID) ([]datamodel.TritonModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTritonModels", arg0)
	ret0, _ := ret[0].([]datamodel.TritonModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTritonModels indicates an expected call of GetTritonModels.
func (mr *MockRepositoryMockRecorder) GetTritonModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTritonModels", reflect.TypeOf((*MockRepository)(nil).GetTritonModels), arg0)
}

// ListModels mocks base method.
func (m *MockRepository) ListModels(arg0 datamodel.ListModelQuery) ([]datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].([]datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockRepositoryMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockRepository)(nil).ListModels), arg0)
}

// UpdateModelInstance mocks base method.
func (m *MockRepository) UpdateModelInstance(arg0 uuid.UUID, arg1 string, arg2 datamodel.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelInstance indicates an expected call of UpdateModelInstance.
func (mr *MockRepositoryMockRecorder) UpdateModelInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelInstance", reflect.TypeOf((*MockRepository)(nil).UpdateModelInstance), arg0, arg1, arg2)
}

// UpdateModelMetaData mocks base method.
func (m *MockRepository) UpdateModelMetaData(arg0 uuid.UUID, arg1 datamodel.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelMetaData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelMetaData indicates an expected call of UpdateModelMetaData.
func (mr *MockRepositoryMockRecorder) UpdateModelMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelMetaData", reflect.TypeOf((*MockRepository)(nil).UpdateModelMetaData), arg0, arg1)
}
