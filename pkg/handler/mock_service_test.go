// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/model-backend/pkg/service (interfaces: Service)

// Package handler_test is a generated GoMock package.
package handler_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datamodel "github.com/instill-ai/model-backend/pkg/datamodel"
	modelv1alpha "github.com/instill-ai/protogen-go/model/v1alpha"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockService) CreateModel(arg0 *datamodel.Model) (*datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockServiceMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockService)(nil).CreateModel), arg0)
}

// CreateModelBinaryFileUpload mocks base method.
func (m *MockService) CreateModelBinaryFileUpload(arg0 string, arg1 *datamodel.Model) (*modelv1alpha.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelBinaryFileUpload", arg0, arg1)
	ret0, _ := ret[0].(*modelv1alpha.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelBinaryFileUpload indicates an expected call of CreateModelBinaryFileUpload.
func (mr *MockServiceMockRecorder) CreateModelBinaryFileUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelBinaryFileUpload", reflect.TypeOf((*MockService)(nil).CreateModelBinaryFileUpload), arg0, arg1)
}

// CreateVersion mocks base method.
func (m *MockService) CreateVersion(arg0 datamodel.Version) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", arg0)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockServiceMockRecorder) CreateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockService)(nil).CreateVersion), arg0)
}

// DeleteModel mocks base method.
func (m *MockService) DeleteModel(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockServiceMockRecorder) DeleteModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockService)(nil).DeleteModel), arg0, arg1)
}

// DeleteModelVersion mocks base method.
func (m *MockService) DeleteModelVersion(arg0, arg1 string, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockServiceMockRecorder) DeleteModelVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockService)(nil).DeleteModelVersion), arg0, arg1, arg2)
}

// GetFullModelData mocks base method.
func (m *MockService) GetFullModelData(arg0, arg1 string) (*modelv1alpha.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullModelData", arg0, arg1)
	ret0, _ := ret[0].(*modelv1alpha.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullModelData indicates an expected call of GetFullModelData.
func (mr *MockServiceMockRecorder) GetFullModelData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullModelData", reflect.TypeOf((*MockService)(nil).GetFullModelData), arg0, arg1)
}

// GetModelByName mocks base method.
func (m *MockService) GetModelByName(arg0, arg1 string) (datamodel.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockServiceMockRecorder) GetModelByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockService)(nil).GetModelByName), arg0, arg1)
}

// GetModelVersion mocks base method.
func (m *MockService) GetModelVersion(arg0, arg1 uint) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", arg0, arg1)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockServiceMockRecorder) GetModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockService)(nil).GetModelVersion), arg0, arg1)
}

// GetModelVersionLatest mocks base method.
func (m *MockService) GetModelVersionLatest(arg0 uint) (datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionLatest", arg0)
	ret0, _ := ret[0].(datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersionLatest indicates an expected call of GetModelVersionLatest.
func (mr *MockServiceMockRecorder) GetModelVersionLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionLatest", reflect.TypeOf((*MockService)(nil).GetModelVersionLatest), arg0)
}

// GetModelVersions mocks base method.
func (m *MockService) GetModelVersions(arg0 uint) ([]datamodel.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersions", arg0)
	ret0, _ := ret[0].([]datamodel.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersions indicates an expected call of GetModelVersions.
func (mr *MockServiceMockRecorder) GetModelVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersions", reflect.TypeOf((*MockService)(nil).GetModelVersions), arg0)
}

// ListModels mocks base method.
func (m *MockService) ListModels(arg0 string) ([]*modelv1alpha.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].([]*modelv1alpha.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockServiceMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockService)(nil).ListModels), arg0)
}

// ModelInfer mocks base method.
func (m *MockService) ModelInfer(arg0, arg1 string, arg2 uint, arg3 [][]byte, arg4 modelv1alpha.Model_Task) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfer indicates an expected call of ModelInfer.
func (mr *MockServiceMockRecorder) ModelInfer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfer", reflect.TypeOf((*MockService)(nil).ModelInfer), arg0, arg1, arg2, arg3, arg4)
}

// UpdateModelVersion mocks base method.
func (m *MockService) UpdateModelVersion(arg0 string, arg1 *modelv1alpha.UpdateModelVersionRequest) (*modelv1alpha.ModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*modelv1alpha.ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockServiceMockRecorder) UpdateModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockService)(nil).UpdateModelVersion), arg0, arg1)
}
