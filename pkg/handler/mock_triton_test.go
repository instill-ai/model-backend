// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/model-backend/pkg/triton (interfaces: Triton)

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	triton "github.com/instill-ai/model-backend/pkg/triton"
	inferenceserver "github.com/instill-ai/model-backend/pkg/triton/inferenceserver"
	taskv1alpha "github.com/instill-ai/protogen-go/common/task/v1alpha"
)

// MockTriton is a mock of Triton interface.
type MockTriton struct {
	ctrl     *gomock.Controller
	recorder *MockTritonMockRecorder
}

// MockTritonMockRecorder is the mock recorder for MockTriton.
type MockTritonMockRecorder struct {
	mock *MockTriton
}

// NewMockTriton creates a new mock instance.
func NewMockTriton(ctrl *gomock.Controller) *MockTriton {
	mock := &MockTriton{ctrl: ctrl}
	mock.recorder = &MockTritonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriton) EXPECT() *MockTritonMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTriton) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTritonMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTriton)(nil).Close))
}

// Init mocks base method.
func (m *MockTriton) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockTritonMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTriton)(nil).Init))
}

// IsTritonServerReady mocks base method.
func (m *MockTriton) IsTritonServerReady(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTritonServerReady", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTritonServerReady indicates an expected call of IsTritonServerReady.
func (mr *MockTritonMockRecorder) IsTritonServerReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTritonServerReady", reflect.TypeOf((*MockTriton)(nil).IsTritonServerReady), arg0)
}

// ListModelsRequest mocks base method.
func (m *MockTriton) ListModelsRequest(arg0 context.Context) *inferenceserver.RepositoryIndexResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsRequest", arg0)
	ret0, _ := ret[0].(*inferenceserver.RepositoryIndexResponse)
	return ret0
}

// ListModelsRequest indicates an expected call of ListModelsRequest.
func (mr *MockTritonMockRecorder) ListModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsRequest", reflect.TypeOf((*MockTriton)(nil).ListModelsRequest), arg0)
}

// LoadModelRequest mocks base method.
func (m *MockTriton) LoadModelRequest(arg0 context.Context, arg1 string) (*inferenceserver.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadModelRequest", arg0, arg1)
	ret0, _ := ret[0].(*inferenceserver.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadModelRequest indicates an expected call of LoadModelRequest.
func (mr *MockTritonMockRecorder) LoadModelRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModelRequest", reflect.TypeOf((*MockTriton)(nil).LoadModelRequest), arg0, arg1)
}

// ModelConfigRequest mocks base method.
func (m *MockTriton) ModelConfigRequest(arg0 context.Context, arg1, arg2 string) *inferenceserver.ModelConfigResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*inferenceserver.ModelConfigResponse)
	return ret0
}

// ModelConfigRequest indicates an expected call of ModelConfigRequest.
func (mr *MockTritonMockRecorder) ModelConfigRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigRequest", reflect.TypeOf((*MockTriton)(nil).ModelConfigRequest), arg0, arg1, arg2)
}

// ModelInferRequest mocks base method.
func (m *MockTriton) ModelInferRequest(arg0 context.Context, arg1 taskv1alpha.Task, arg2 triton.InferInput, arg3, arg4 string, arg5 *inferenceserver.ModelMetadataResponse, arg6 *inferenceserver.ModelConfigResponse) (*inferenceserver.ModelInferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInferRequest", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*inferenceserver.ModelInferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInferRequest indicates an expected call of ModelInferRequest.
func (mr *MockTritonMockRecorder) ModelInferRequest(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInferRequest", reflect.TypeOf((*MockTriton)(nil).ModelInferRequest), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ModelMetadataRequest mocks base method.
func (m *MockTriton) ModelMetadataRequest(arg0 context.Context, arg1, arg2 string) *inferenceserver.ModelMetadataResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadataRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*inferenceserver.ModelMetadataResponse)
	return ret0
}

// ModelMetadataRequest indicates an expected call of ModelMetadataRequest.
func (mr *MockTritonMockRecorder) ModelMetadataRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadataRequest", reflect.TypeOf((*MockTriton)(nil).ModelMetadataRequest), arg0, arg1, arg2)
}

// ModelReadyRequest mocks base method.
func (m *MockTriton) ModelReadyRequest(arg0 context.Context, arg1, arg2 string) *inferenceserver.ModelReadyResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelReadyRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*inferenceserver.ModelReadyResponse)
	return ret0
}

// ModelReadyRequest indicates an expected call of ModelReadyRequest.
func (mr *MockTritonMockRecorder) ModelReadyRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelReadyRequest", reflect.TypeOf((*MockTriton)(nil).ModelReadyRequest), arg0, arg1, arg2)
}

// PostProcess mocks base method.
func (m *MockTriton) PostProcess(arg0 *inferenceserver.ModelInferResponse, arg1 *inferenceserver.ModelMetadataResponse, arg2 taskv1alpha.Task) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostProcess", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProcess indicates an expected call of PostProcess.
func (mr *MockTritonMockRecorder) PostProcess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProcess", reflect.TypeOf((*MockTriton)(nil).PostProcess), arg0, arg1, arg2)
}

// ServerLiveRequest mocks base method.
func (m *MockTriton) ServerLiveRequest(arg0 context.Context) *inferenceserver.ServerLiveResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerLiveRequest", arg0)
	ret0, _ := ret[0].(*inferenceserver.ServerLiveResponse)
	return ret0
}

// ServerLiveRequest indicates an expected call of ServerLiveRequest.
func (mr *MockTritonMockRecorder) ServerLiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerLiveRequest", reflect.TypeOf((*MockTriton)(nil).ServerLiveRequest), arg0)
}

// ServerReadyRequest mocks base method.
func (m *MockTriton) ServerReadyRequest(arg0 context.Context) *inferenceserver.ServerReadyResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReadyRequest", arg0)
	ret0, _ := ret[0].(*inferenceserver.ServerReadyResponse)
	return ret0
}

// ServerReadyRequest indicates an expected call of ServerReadyRequest.
func (mr *MockTritonMockRecorder) ServerReadyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReadyRequest", reflect.TypeOf((*MockTriton)(nil).ServerReadyRequest), arg0)
}

// UnloadModelRequest mocks base method.
func (m *MockTriton) UnloadModelRequest(arg0 context.Context, arg1 string) (*inferenceserver.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadModelRequest", arg0, arg1)
	ret0, _ := ret[0].(*inferenceserver.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadModelRequest indicates an expected call of UnloadModelRequest.
func (mr *MockTritonMockRecorder) UnloadModelRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadModelRequest", reflect.TypeOf((*MockTriton)(nil).UnloadModelRequest), arg0, arg1)
}
