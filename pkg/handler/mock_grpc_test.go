// Code generated by MockGen. DO NOT EDIT.
// Source: ./protogen-go/model/model_grpc.pb.go

// Package rpc is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	grpc "google.golang.org/grpc"

	modelPB "github.com/instill-ai/protogen-go/model/v1alpha"
)

// MockServiceClient is a mock of ModelServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// CreateModelBinaryFileUpload mocks base method.
func (m *MockServiceClient) CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (modelPB.ModelService_CreateModelBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelPB.ModelService_CreateModelBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelBinaryFileUpload indicates an expected call of CreateModelBinaryFileUpload.
func (mr *MockServiceClientMockRecorder) CreateModelBinaryFileUpload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelBinaryFileUpload", reflect.TypeOf((*MockServiceClient)(nil).CreateModelBinaryFileUpload), varargs...)
}

// DeleteModel mocks base method.
func (m *MockServiceClient) DeleteModel(ctx context.Context, in *modelPB.DeleteModelRequest, opts ...grpc.CallOption) (*modelPB.DeleteModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(*modelPB.DeleteModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockServiceClientMockRecorder) DeleteModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockServiceClient)(nil).DeleteModel), varargs...)
}

// DeleteModelVersion mocks base method.
func (m *MockServiceClient) DeleteModelVersion(ctx context.Context, in *modelPB.DeleteModelVersionRequest, opts ...grpc.CallOption) (*modelPB.DeleteModelVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelVersion", varargs...)
	ret0, _ := ret[0].(*modelPB.DeleteModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockServiceClientMockRecorder) DeleteModelVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockServiceClient)(nil).DeleteModelVersion), varargs...)
}

// GetModel mocks base method.
func (m *MockServiceClient) GetModel(ctx context.Context, in *modelPB.GetModelRequest, opts ...grpc.CallOption) (*modelPB.GetModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*modelPB.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockServiceClientMockRecorder) GetModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockServiceClient)(nil).GetModel), varargs...)
}

// ListModel mocks base method.
func (m *MockServiceClient) ListModel(ctx context.Context, in *modelPB.ListModelRequest, opts ...grpc.CallOption) (*modelPB.ListModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModel", varargs...)
	ret0, _ := ret[0].(*modelPB.ListModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModel indicates an expected call of ListModel.
func (mr *MockServiceClientMockRecorder) ListModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModel", reflect.TypeOf((*MockServiceClient)(nil).ListModel), varargs...)
}

// Liveness mocks base method.
func (m *MockServiceClient) Liveness(ctx context.Context, in *modelPB.LivenessRequest, opts ...grpc.CallOption) (*modelPB.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*modelPB.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockServiceClientMockRecorder) Liveness(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockServiceClient)(nil).Liveness), varargs...)
}

// Readiness mocks base method.
func (m *MockServiceClient) Readiness(ctx context.Context, in *modelPB.ReadinessRequest, opts ...grpc.CallOption) (*modelPB.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*modelPB.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockServiceClientMockRecorder) Readiness(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockServiceClient)(nil).Readiness), varargs...)
}

// TriggerModel mocks base method.
func (m *MockServiceClient) TriggerModel(ctx context.Context, in *modelPB.TriggerModelRequest, opts ...grpc.CallOption) (*modelPB.TriggerModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModel", varargs...)
	ret0, _ := ret[0].(*modelPB.TriggerModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModel indicates an expected call of TriggerModel.
func (mr *MockServiceClientMockRecorder) TriggerModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModel", reflect.TypeOf((*MockServiceClient)(nil).TriggerModel), varargs...)
}

// TriggerModelBinaryFileUpload mocks base method.
func (m *MockServiceClient) TriggerModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (modelPB.ModelService_TriggerModelBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModelBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelPB.ModelService_TriggerModelBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModelBinaryFileUpload indicates an expected call of TriggerModelBinaryFileUpload.
func (mr *MockServiceClientMockRecorder) TriggerModelBinaryFileUpload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModelBinaryFileUpload", reflect.TypeOf((*MockServiceClient)(nil).TriggerModelBinaryFileUpload), varargs...)
}

// UpdateModelVersion mocks base method.
func (m *MockServiceClient) UpdateModelVersion(ctx context.Context, in *modelPB.UpdateModelVersionRequest, opts ...grpc.CallOption) (*modelPB.UpdateModelVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelVersion", varargs...)
	ret0, _ := ret[0].(*modelPB.UpdateModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockServiceClientMockRecorder) UpdateModelVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockServiceClient)(nil).UpdateModelVersion), varargs...)
}

// MockModelService_CreateModelBinaryFileUploadClient is a mock of ModelService_CreateModelBinaryFileUploadClient interface.
type MockModelService_CreateModelBinaryFileUploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelService_CreateModelBinaryFileUploadClientMockRecorder
}

// MockModelService_CreateModelBinaryFileUploadClientMockRecorder is the mock recorder for MockModelService_CreateModelBinaryFileUploadClient.
type MockModelService_CreateModelBinaryFileUploadClientMockRecorder struct {
	mock *MockModelService_CreateModelBinaryFileUploadClient
}

// NewMockModelService_CreateModelBinaryFileUploadClient creates a new mock instance.
func NewMockModelService_CreateModelBinaryFileUploadClient(ctrl *gomock.Controller) *MockModelService_CreateModelBinaryFileUploadClient {
	mock := &MockModelService_CreateModelBinaryFileUploadClient{ctrl: ctrl}
	mock.recorder = &MockModelService_CreateModelBinaryFileUploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService_CreateModelBinaryFileUploadClient) EXPECT() *MockModelService_CreateModelBinaryFileUploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) CloseAndRecv() (*modelPB.CreateModelBinaryFileUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*modelPB.CreateModelBinaryFileUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockModelService_CreateModelBinaryFileUploadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) Send(arg0 *modelPB.CreateModelBinaryFileUploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelService_CreateModelBinaryFileUploadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockModelService_CreateModelBinaryFileUploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadClient)(nil).Trailer))
}

// MockModelService_TriggerModelBinaryFileUploadClient is a mock of ModelService_TriggerModelBinaryFileUploadClient interface.
type MockModelService_TriggerModelBinaryFileUploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder
}

// MockModelService_TriggerModelBinaryFileUploadClientMockRecorder is the mock recorder for MockModelService_TriggerModelBinaryFileUploadClient.
type MockModelService_TriggerModelBinaryFileUploadClientMockRecorder struct {
	mock *MockModelService_TriggerModelBinaryFileUploadClient
}

// NewMockModelService_TriggerModelBinaryFileUploadClient creates a new mock instance.
func NewMockModelService_TriggerModelBinaryFileUploadClient(ctrl *gomock.Controller) *MockModelService_TriggerModelBinaryFileUploadClient {
	mock := &MockModelService_TriggerModelBinaryFileUploadClient{ctrl: ctrl}
	mock.recorder = &MockModelService_TriggerModelBinaryFileUploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) EXPECT() *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) CloseAndRecv() (*modelPB.TriggerModelBinaryFileUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*modelPB.TriggerModelBinaryFileUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockModelService_TriggerModelBinaryFileUploadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) Send(arg0 *modelPB.TriggerModelBinaryFileUploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelService_TriggerModelBinaryFileUploadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockModelService_TriggerModelBinaryFileUploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadClient)(nil).Trailer))
}

// MockModelServiceServer is a mock of ModelServiceServer interface.
type MockModelServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceServerMockRecorder
}

// MockModelServiceServerMockRecorder is the mock recorder for MockModelServiceServer.
type MockModelServiceServerMockRecorder struct {
	mock *MockModelServiceServer
}

// NewMockModelServiceServer creates a new mock instance.
func NewMockModelServiceServer(ctrl *gomock.Controller) *MockModelServiceServer {
	mock := &MockModelServiceServer{ctrl: ctrl}
	mock.recorder = &MockModelServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceServer) EXPECT() *MockModelServiceServerMockRecorder {
	return m.recorder
}

// CreateModelBinaryFileUpload mocks base method.
func (m *MockModelServiceServer) CreateModelBinaryFileUpload(arg0 modelPB.ModelService_CreateModelBinaryFileUploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelBinaryFileUpload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModelBinaryFileUpload indicates an expected call of CreateModelBinaryFileUpload.
func (mr *MockModelServiceServerMockRecorder) CreateModelBinaryFileUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelBinaryFileUpload", reflect.TypeOf((*MockModelServiceServer)(nil).CreateModelBinaryFileUpload), arg0)
}

// DeleteModel mocks base method.
func (m *MockModelServiceServer) DeleteModel(arg0 context.Context, arg1 *modelPB.DeleteModelRequest) (*modelPB.DeleteModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.DeleteModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelServiceServerMockRecorder) DeleteModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelServiceServer)(nil).DeleteModel), arg0, arg1)
}

// DeleteModelVersion mocks base method.
func (m *MockModelServiceServer) DeleteModelVersion(arg0 context.Context, arg1 *modelPB.DeleteModelVersionRequest) (*modelPB.DeleteModelVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.DeleteModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockModelServiceServerMockRecorder) DeleteModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockModelServiceServer)(nil).DeleteModelVersion), arg0, arg1)
}

// GetModel mocks base method.
func (m *MockModelServiceServer) GetModel(arg0 context.Context, arg1 *modelPB.GetModelRequest) (*modelPB.GetModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelServiceServerMockRecorder) GetModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelServiceServer)(nil).GetModel), arg0, arg1)
}

// ListModel mocks base method.
func (m *MockModelServiceServer) ListModel(arg0 context.Context, arg1 *modelPB.ListModelRequest) (*modelPB.ListModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModel", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.ListModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModel indicates an expected call of ListModel.
func (mr *MockModelServiceServerMockRecorder) ListModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModel", reflect.TypeOf((*MockModelServiceServer)(nil).ListModel), arg0, arg1)
}

// Liveness mocks base method.
func (m *MockModelServiceServer) Liveness(arg0 context.Context, arg1 *modelPB.LivenessRequest) (*modelPB.LivenessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liveness", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockModelServiceServerMockRecorder) Liveness(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockModelServiceServer)(nil).Liveness), arg0, arg1)
}

// Readiness mocks base method.
func (m *MockModelServiceServer) Readiness(arg0 context.Context, arg1 *modelPB.ReadinessRequest) (*modelPB.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readiness", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockModelServiceServerMockRecorder) Readiness(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockModelServiceServer)(nil).Readiness), arg0, arg1)
}

// TriggerModel mocks base method.
func (m *MockModelServiceServer) TriggerModel(arg0 context.Context, arg1 *modelPB.TriggerModelRequest) (*modelPB.TriggerModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerModel", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.TriggerModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModel indicates an expected call of TriggerModel.
func (mr *MockModelServiceServerMockRecorder) TriggerModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModel", reflect.TypeOf((*MockModelServiceServer)(nil).TriggerModel), arg0, arg1)
}

// TriggerModelBinaryFileUpload mocks base method.
func (m *MockModelServiceServer) TriggerModelBinaryFileUpload(arg0 modelPB.ModelService_TriggerModelBinaryFileUploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerModelBinaryFileUpload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerModelBinaryFileUpload indicates an expected call of TriggerModelBinaryFileUpload.
func (mr *MockModelServiceServerMockRecorder) TriggerModelBinaryFileUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModelBinaryFileUpload", reflect.TypeOf((*MockModelServiceServer)(nil).TriggerModelBinaryFileUpload), arg0)
}

// UpdateModelVersion mocks base method.
func (m *MockModelServiceServer) UpdateModelVersion(arg0 context.Context, arg1 *modelPB.UpdateModelVersionRequest) (*modelPB.UpdateModelVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*modelPB.UpdateModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockModelServiceServerMockRecorder) UpdateModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockModelServiceServer)(nil).UpdateModelVersion), arg0, arg1)
}

// MockUnsafeModelServiceServer is a mock of UnsafeModelServiceServer interface.
type MockUnsafeModelServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeModelServiceServerMockRecorder
}

// MockUnsafeModelServiceServerMockRecorder is the mock recorder for MockUnsafeModelServiceServer.
type MockUnsafeModelServiceServerMockRecorder struct {
	mock *MockUnsafeModelServiceServer
}

// NewMockUnsafeModelServiceServer creates a new mock instance.
func NewMockUnsafeModelServiceServer(ctrl *gomock.Controller) *MockUnsafeModelServiceServer {
	mock := &MockUnsafeModelServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeModelServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeModelServiceServer) EXPECT() *MockUnsafeModelServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedModelServiceServer mocks base method.
func (m *MockUnsafeModelServiceServer) mustEmbedUnimplementedModelServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedModelServiceServer")
}

// mustEmbedUnimplementedModelServiceServer indicates an expected call of mustEmbedUnimplementedModelServiceServer.
func (mr *MockUnsafeModelServiceServerMockRecorder) mustEmbedUnimplementedModelServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedModelServiceServer", reflect.TypeOf((*MockUnsafeModelServiceServer)(nil).mustEmbedUnimplementedModelServiceServer))
}

// MockModelService_CreateModelBinaryFileUploadServer is a mock of ModelService_CreateModelBinaryFileUploadServer interface.
type MockModelService_CreateModelBinaryFileUploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelService_CreateModelBinaryFileUploadServerMockRecorder
}

// MockModelService_CreateModelBinaryFileUploadServerMockRecorder is the mock recorder for MockModelService_CreateModelBinaryFileUploadServer.
type MockModelService_CreateModelBinaryFileUploadServerMockRecorder struct {
	mock *MockModelService_CreateModelBinaryFileUploadServer
}

// NewMockModelService_CreateModelBinaryFileUploadServer creates a new mock instance.
func NewMockModelService_CreateModelBinaryFileUploadServer(ctrl *gomock.Controller) *MockModelService_CreateModelBinaryFileUploadServer {
	mock := &MockModelService_CreateModelBinaryFileUploadServer{ctrl: ctrl}
	mock.recorder = &MockModelService_CreateModelBinaryFileUploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService_CreateModelBinaryFileUploadServer) EXPECT() *MockModelService_CreateModelBinaryFileUploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) Recv() (*modelPB.CreateModelBinaryFileUploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*modelPB.CreateModelBinaryFileUploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockModelService_CreateModelBinaryFileUploadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) SendAndClose(arg0 *modelPB.CreateModelBinaryFileUploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelService_CreateModelBinaryFileUploadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockModelService_CreateModelBinaryFileUploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockModelService_CreateModelBinaryFileUploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockModelService_CreateModelBinaryFileUploadServer)(nil).SetTrailer), arg0)
}

// MockModelService_TriggerModelBinaryFileUploadServer is a mock of ModelService_TriggerModelBinaryFileUploadServer interface.
type MockModelService_TriggerModelBinaryFileUploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder
}

// MockModelService_TriggerModelBinaryFileUploadServerMockRecorder is the mock recorder for MockModelService_TriggerModelBinaryFileUploadServer.
type MockModelService_TriggerModelBinaryFileUploadServerMockRecorder struct {
	mock *MockModelService_TriggerModelBinaryFileUploadServer
}

// NewMockModelService_TriggerModelBinaryFileUploadServer creates a new mock instance.
func NewMockModelService_TriggerModelBinaryFileUploadServer(ctrl *gomock.Controller) *MockModelService_TriggerModelBinaryFileUploadServer {
	mock := &MockModelService_TriggerModelBinaryFileUploadServer{ctrl: ctrl}
	mock.recorder = &MockModelService_TriggerModelBinaryFileUploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) EXPECT() *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) Recv() (*modelPB.TriggerModelBinaryFileUploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*modelPB.TriggerModelBinaryFileUploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockModelService_TriggerModelBinaryFileUploadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) SendAndClose(arg0 *modelPB.TriggerModelBinaryFileUploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelService_TriggerModelBinaryFileUploadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockModelService_TriggerModelBinaryFileUploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockModelService_TriggerModelBinaryFileUploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockModelService_TriggerModelBinaryFileUploadServer)(nil).SetTrailer), arg0)
}
