// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/triton/triton.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	inferenceserver "github.com/instill-ai/model-backend/internal/inferenceserver"
	modelv1alpha "github.com/instill-ai/protogen-go/model/v1alpha"
)

// MockTritonService is a mock of TritonService interface.
type MockTritonService struct {
	ctrl     *gomock.Controller
	recorder *MockTritonServiceMockRecorder
}

// MockTritonServiceMockRecorder is the mock recorder for MockTritonService.
type MockTritonServiceMockRecorder struct {
	mock *MockTritonService
}

// NewMockTritonService creates a new mock instance.
func NewMockTritonService(ctrl *gomock.Controller) *MockTritonService {
	mock := &MockTritonService{ctrl: ctrl}
	mock.recorder = &MockTritonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTritonService) EXPECT() *MockTritonServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTritonService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTritonServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTritonService)(nil).Close))
}

// Init mocks base method.
func (m *MockTritonService) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockTritonServiceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTritonService)(nil).Init))
}

// IsTritonServerReady mocks base method.
func (m *MockTritonService) IsTritonServerReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTritonServerReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTritonServerReady indicates an expected call of IsTritonServerReady.
func (mr *MockTritonServiceMockRecorder) IsTritonServerReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTritonServerReady", reflect.TypeOf((*MockTritonService)(nil).IsTritonServerReady))
}

// ListModelsRequest mocks base method.
func (m *MockTritonService) ListModelsRequest() *inferenceserver.RepositoryIndexResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsRequest")
	ret0, _ := ret[0].(*inferenceserver.RepositoryIndexResponse)
	return ret0
}

// ListModelsRequest indicates an expected call of ListModelsRequest.
func (mr *MockTritonServiceMockRecorder) ListModelsRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsRequest", reflect.TypeOf((*MockTritonService)(nil).ListModelsRequest))
}

// LoadModelRequest mocks base method.
func (m *MockTritonService) LoadModelRequest(modelName string) (*inferenceserver.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadModelRequest", modelName)
	ret0, _ := ret[0].(*inferenceserver.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadModelRequest indicates an expected call of LoadModelRequest.
func (mr *MockTritonServiceMockRecorder) LoadModelRequest(modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModelRequest", reflect.TypeOf((*MockTritonService)(nil).LoadModelRequest), modelName)
}

// ModelConfigRequest mocks base method.
func (m *MockTritonService) ModelConfigRequest(modelName, modelVersion string) *inferenceserver.ModelConfigResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigRequest", modelName, modelVersion)
	ret0, _ := ret[0].(*inferenceserver.ModelConfigResponse)
	return ret0
}

// ModelConfigRequest indicates an expected call of ModelConfigRequest.
func (mr *MockTritonServiceMockRecorder) ModelConfigRequest(modelName, modelVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigRequest", reflect.TypeOf((*MockTritonService)(nil).ModelConfigRequest), modelName, modelVersion)
}

// ModelInferRequest mocks base method.
func (m *MockTritonService) ModelInferRequest(task modelv1alpha.Model_Task, rawInput [][]byte, modelName, modelVersion string, modelMetadata *inferenceserver.ModelMetadataResponse, modelConfig *inferenceserver.ModelConfigResponse) (*inferenceserver.ModelInferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInferRequest", task, rawInput, modelName, modelVersion, modelMetadata, modelConfig)
	ret0, _ := ret[0].(*inferenceserver.ModelInferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInferRequest indicates an expected call of ModelInferRequest.
func (mr *MockTritonServiceMockRecorder) ModelInferRequest(cvTask, rawInput, modelName, modelVersion, modelMetadata, modelConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInferRequest", reflect.TypeOf((*MockTritonService)(nil).ModelInferRequest), cvTask, rawInput, modelName, modelVersion, modelMetadata, modelConfig)
}

// ModelMetadataRequest mocks base method.
func (m *MockTritonService) ModelMetadataRequest(modelName, modelVersion string) *inferenceserver.ModelMetadataResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadataRequest", modelName, modelVersion)
	ret0, _ := ret[0].(*inferenceserver.ModelMetadataResponse)
	return ret0
}

// ModelMetadataRequest indicates an expected call of ModelMetadataRequest.
func (mr *MockTritonServiceMockRecorder) ModelMetadataRequest(modelName, modelVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadataRequest", reflect.TypeOf((*MockTritonService)(nil).ModelMetadataRequest), modelName, modelVersion)
}

// PostProcess mocks base method.
func (m *MockTritonService) PostProcess(inferResponse *inferenceserver.ModelInferResponse, modelMetadata *inferenceserver.ModelMetadataResponse, task modelv1alpha.Model_Task) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostProcess", inferResponse, modelMetadata, task)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProcess indicates an expected call of PostProcess.
func (mr *MockTritonServiceMockRecorder) PostProcess(inferResponse, modelMetadata, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProcess", reflect.TypeOf((*MockTritonService)(nil).PostProcess), inferResponse, modelMetadata, task)
}

// ServerLiveRequest mocks base method.
func (m *MockTritonService) ServerLiveRequest() *inferenceserver.ServerLiveResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerLiveRequest")
	ret0, _ := ret[0].(*inferenceserver.ServerLiveResponse)
	return ret0
}

// ServerLiveRequest indicates an expected call of ServerLiveRequest.
func (mr *MockTritonServiceMockRecorder) ServerLiveRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerLiveRequest", reflect.TypeOf((*MockTritonService)(nil).ServerLiveRequest))
}

// ServerReadyRequest mocks base method.
func (m *MockTritonService) ServerReadyRequest() *inferenceserver.ServerReadyResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReadyRequest")
	ret0, _ := ret[0].(*inferenceserver.ServerReadyResponse)
	return ret0
}

// ServerReadyRequest indicates an expected call of ServerReadyRequest.
func (mr *MockTritonServiceMockRecorder) ServerReadyRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReadyRequest", reflect.TypeOf((*MockTritonService)(nil).ServerReadyRequest))
}

// UnloadModelRequest mocks base method.
func (m *MockTritonService) UnloadModelRequest(modelName string) (*inferenceserver.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadModelRequest", modelName)
	ret0, _ := ret[0].(*inferenceserver.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadModelRequest indicates an expected call of UnloadModelRequest.
func (mr *MockTritonServiceMockRecorder) UnloadModelRequest(modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadModelRequest", reflect.TypeOf((*MockTritonService)(nil).UnloadModelRequest), modelName)
}
