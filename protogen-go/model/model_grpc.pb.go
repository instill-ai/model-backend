// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelClient is the client API for Model service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelClient interface {
	Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	CreateModelByUpload(ctx context.Context, opts ...grpc.CallOption) (Model_CreateModelByUploadClient, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelsResponse, error)
	LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error)
	UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error)
	// This method handle upload file request
	PredictModelByUpload(ctx context.Context, opts ...grpc.CallOption) (Model_PredictModelByUploadClient, error)
	// This method handle request with file in body such as url/base64 encode
	PredictModel(ctx context.Context, in *PredictModelRequest, opts ...grpc.CallOption) (*PredictModelResponse, error)
	ListModels(ctx context.Context, in *ListModelRequest, opts ...grpc.CallOption) (*ListModelResponse, error)
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*ModelInfo, error)
}

type modelClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClient(cc grpc.ClientConnInterface) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) Liveness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) Readiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) CreateModelByUpload(ctx context.Context, opts ...grpc.CallOption) (Model_CreateModelByUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[0], "/instill.model.Model/CreateModelByUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelCreateModelByUploadClient{stream}
	return x, nil
}

type Model_CreateModelByUploadClient interface {
	Send(*CreateModelRequest) error
	CloseAndRecv() (*CreateModelsResponse, error)
	grpc.ClientStream
}

type modelCreateModelByUploadClient struct {
	grpc.ClientStream
}

func (x *modelCreateModelByUploadClient) Send(m *CreateModelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelCreateModelByUploadClient) CloseAndRecv() (*CreateModelsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateModelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelsResponse, error) {
	out := new(CreateModelsResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error) {
	out := new(LoadModelResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/LoadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error) {
	out := new(UnloadModelResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/UnloadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) PredictModelByUpload(ctx context.Context, opts ...grpc.CallOption) (Model_PredictModelByUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[1], "/instill.model.Model/PredictModelByUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPredictModelByUploadClient{stream}
	return x, nil
}

type Model_PredictModelByUploadClient interface {
	Send(*PredictModelRequest) error
	CloseAndRecv() (*PredictModelResponse, error)
	grpc.ClientStream
}

type modelPredictModelByUploadClient struct {
	grpc.ClientStream
}

func (x *modelPredictModelByUploadClient) Send(m *PredictModelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPredictModelByUploadClient) CloseAndRecv() (*PredictModelResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PredictModelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelClient) PredictModel(ctx context.Context, in *PredictModelRequest, opts ...grpc.CallOption) (*PredictModelResponse, error) {
	out := new(PredictModelResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/PredictModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) ListModels(ctx context.Context, in *ListModelRequest, opts ...grpc.CallOption) (*ListModelResponse, error) {
	out := new(ListModelResponse)
	err := c.cc.Invoke(ctx, "/instill.model.Model/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*ModelInfo, error) {
	out := new(ModelInfo)
	err := c.cc.Invoke(ctx, "/instill.model.Model/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServer is the server API for Model service.
// All implementations should embed UnimplementedModelServer
// for forward compatibility
type ModelServer interface {
	Liveness(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	Readiness(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	CreateModelByUpload(Model_CreateModelByUploadServer) error
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelsResponse, error)
	LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error)
	UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error)
	// This method handle upload file request
	PredictModelByUpload(Model_PredictModelByUploadServer) error
	// This method handle request with file in body such as url/base64 encode
	PredictModel(context.Context, *PredictModelRequest) (*PredictModelResponse, error)
	ListModels(context.Context, *ListModelRequest) (*ListModelResponse, error)
	GetModel(context.Context, *GetModelRequest) (*ModelInfo, error)
}

// UnimplementedModelServer should be embedded to have forward compatible implementations.
type UnimplementedModelServer struct {
}

func (UnimplementedModelServer) Liveness(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelServer) Readiness(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelServer) CreateModelByUpload(Model_CreateModelByUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateModelByUpload not implemented")
}
func (UnimplementedModelServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelServer) LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModel not implemented")
}
func (UnimplementedModelServer) UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadModel not implemented")
}
func (UnimplementedModelServer) PredictModelByUpload(Model_PredictModelByUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method PredictModelByUpload not implemented")
}
func (UnimplementedModelServer) PredictModel(context.Context, *PredictModelRequest) (*PredictModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictModel not implemented")
}
func (UnimplementedModelServer) ListModels(context.Context, *ListModelRequest) (*ListModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelServer) GetModel(context.Context, *GetModelRequest) (*ModelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}

// UnsafeModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServer will
// result in compilation errors.
type UnsafeModelServer interface {
	mustEmbedUnimplementedModelServer()
}

func RegisterModelServer(s grpc.ServiceRegistrar, srv ModelServer) {
	s.RegisterService(&Model_ServiceDesc, srv)
}

func _Model_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).Liveness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).Readiness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_CreateModelByUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).CreateModelByUpload(&modelCreateModelByUploadServer{stream})
}

type Model_CreateModelByUploadServer interface {
	SendAndClose(*CreateModelsResponse) error
	Recv() (*CreateModelRequest, error)
	grpc.ServerStream
}

type modelCreateModelByUploadServer struct {
	grpc.ServerStream
}

func (x *modelCreateModelByUploadServer) SendAndClose(m *CreateModelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelCreateModelByUploadServer) Recv() (*CreateModelRequest, error) {
	m := new(CreateModelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Model_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_LoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).LoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/LoadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).LoadModel(ctx, req.(*LoadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_UnloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).UnloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/UnloadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).UnloadModel(ctx, req.(*UnloadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_PredictModelByUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).PredictModelByUpload(&modelPredictModelByUploadServer{stream})
}

type Model_PredictModelByUploadServer interface {
	SendAndClose(*PredictModelResponse) error
	Recv() (*PredictModelRequest, error)
	grpc.ServerStream
}

type modelPredictModelByUploadServer struct {
	grpc.ServerStream
}

func (x *modelPredictModelByUploadServer) SendAndClose(m *PredictModelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPredictModelByUploadServer) Recv() (*PredictModelRequest, error) {
	m := new(PredictModelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Model_PredictModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).PredictModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/PredictModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).PredictModel(ctx, req.(*PredictModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).ListModels(ctx, req.(*ListModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.model.Model/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Model_ServiceDesc is the grpc.ServiceDesc for Model service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Model_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instill.model.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _Model_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _Model_Readiness_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _Model_CreateModel_Handler,
		},
		{
			MethodName: "LoadModel",
			Handler:    _Model_LoadModel_Handler,
		},
		{
			MethodName: "UnloadModel",
			Handler:    _Model_UnloadModel_Handler,
		},
		{
			MethodName: "PredictModel",
			Handler:    _Model_PredictModel_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Model_ListModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _Model_GetModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateModelByUpload",
			Handler:       _Model_CreateModelByUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PredictModelByUpload",
			Handler:       _Model_PredictModelByUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "model/model.proto",
}
