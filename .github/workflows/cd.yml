name: cd

on:
  push:
    branches:
      - main

env:
  GAR_REGISTRY: europe-west2-docker.pkg.dev/prj-c-devops-artifacts-a306
  GAR_REPOSITORY: model
  GAR_IMAGE: model-backend
  OPENAPI_NAME: model

jobs:
  get-version:
    runs-on: [self-hosted, on-prem, dgx]
    outputs:
      CORE_VERSION: ${{ steps.get-version.outputs.CORE_VERSION }}
      GITHUB_SHA: ${{ steps.get-version.outputs.GITHUB_SHA }}
    steps:
      - name: Checkout (latest)
        uses: actions/checkout@v2

      - name: Get version
        id: get-version
        shell: bash
        run: |
          CORE_VERSION=$(cat version.txt)
          GITHUB_SHA=$(echo ${{ github.sha }} | cut -c -7)
          echo "::set-output name=CORE_VERSION::$CORE_VERSION"
          echo "::set-output name=GITHUB_SHA::$GITHUB_SHA"
  release:
    runs-on: [self-hosted, on-prem, dgx]
    outputs:
      RELEASE_CREATED: ${{ steps.release.outputs.release_created }}
      TAG_NAME: ${{ steps.release.outputs.tag_name }}
      SHA: ${{ steps.release.outputs.sha }}
    steps:
      - name: Import Vault secrets
        id: vault
        uses: hashicorp/vault-action@v2.1.0
        with:
          url: https://vault.instill.tech
          method: approle
          roleId: ${{ secrets.vaultAppRoleRoleId }}
          secretId: ${{ secrets.vaultAppRoleSecretId }}
          tlsSkipVerify: false
          extraHeaders: |
            CF-Access-Client-Id: ${{ secrets.cfAccessClientId }}
            CF-Access-Client-Secret: ${{ secrets.cfAccessClientSecret }}
          secrets: |
            secret/data/devops/github/drop@instill.tech/github-action personal-access-token | GITHUB_TOKEN ;
      - name: Release please action
        id: release
        uses: GoogleCloudPlatform/release-please-action@v2.34
        with:
          # if we use the repo default "GITHUB_TOKEN", the release PR opened by release-please-action (i.e., by GitHub Action workflow) won't trigger push event when it is merged again to main.
          token: ${{ steps.vault.outputs.GITHUB_TOKEN }}
          release-type: simple
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          package-name: ${{ github.event.repository.name }}
          changelog-types: '[{"type":"feat","section":"Features","hidden":false}, {"type":"fix","section":"Bug Fixes","hidden":false}, {"type":"chore","section":"Miscellaneous","hidden":false}, {"type":"ci","section":"Miscellaneous","hidden":false}, {"type":"refactor","section":"Refactor","hidden":false}]'

  build:
    runs-on: [self-hosted, on-prem, dgx]
    needs: [get-version, release]
    steps:
      - name: Checkout (latest)
        uses: actions/checkout@v2

      - name: Build image
        run: |
          if [[ "${{ needs.release.outputs.RELEASE_CREATED }}" == "true" ]]; then
            echo "Released - Tag container with version core"
            DOCKER_BUILDKIT=1 docker build -t $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:${{ needs.get-version.outputs.CORE_VERSION }} .
          else
            echo "Non-released - Tag container with version core and build metadata"
            DOCKER_BUILDKIT=1 docker build -t $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:${{ needs.get-version.outputs.CORE_VERSION }}_${{ needs.get-version.outputs.GITHUB_SHA }} .
          fi
  push:
    runs-on: [self-hosted, on-prem, dgx]
    needs: [release, get-version, build]
    steps:
      - name: Import Vault secrets
        id: vault
        uses: hashicorp/vault-action@v2.1.0
        with:
          url: https://vault.instill.tech
          method: approle
          roleId: ${{ secrets.vaultAppRoleRoleId }}
          secretId: ${{ secrets.vaultAppRoleSecretId }}
          tlsSkipVerify: false
          extraHeaders: |
            CF-Access-Client-Id: ${{ secrets.cfAccessClientId }}
            CF-Access-Client-Secret: ${{ secrets.cfAccessClientSecret }}
          # A magic json output trick: https://github.com/hashicorp/vault-action/issues/153#issuecomment-824329289
          secrets: |
            secret/data/devops/gcp/gar-model@prj-c-devops-artifacts-a306.iam.gserviceaccount.com $.$ | GAR_SA_KEY;
      - name: Push image
        run: |
          echo $GAR_SA_KEY | docker login -u _json_key --password-stdin https://$GAR_REGISTRY
          if [[ "${{ needs.release.outputs.RELEASE_CREATED }}" == "true" ]]; then
            echo "Released - Tag container with version core"
            docker push $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:${{ needs.get-version.outputs.CORE_VERSION }}
          else
            echo "Non-released - Tag container with version core and build metadata"
            docker push $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:${{ needs.get-version.outputs.CORE_VERSION }}_${{ needs.get-version.outputs.GITHUB_SHA }}
          fi
  purge:
    runs-on: [self-hosted, on-prem, dgx]
    needs: [release, get-version, push]
    steps:
      - name: Import Vault secrets
        id: vault
        uses: hashicorp/vault-action@v2.1.0
        with:
          url: https://vault.instill.tech
          method: approle
          roleId: ${{ secrets.vaultAppRoleRoleId }}
          secretId: ${{ secrets.vaultAppRoleSecretId }}
          tlsSkipVerify: false
          extraHeaders: |
            CF-Access-Client-Id: ${{ secrets.cfAccessClientId }}
            CF-Access-Client-Secret: ${{ secrets.cfAccessClientSecret }}
          # A magic json output trick: https://github.com/hashicorp/vault-action/issues/153#issuecomment-824329289
          secrets: |
            secret/data/devops/gcp/gar-model@prj-c-devops-artifacts-a306.iam.gserviceaccount.com $.$ | GAR_SA_KEY;
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "319.0.0"
          service_account_key: ${{ steps.vault.outputs.GAR_SA_KEY }}
          export_default_credentials: true

      - name: Purge build-metadata images
        shell: bash
        run: |
          tags=$(gcloud artifacts docker images list $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE --include-tags --filter='tags~"((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)_\w+)"' --format="value(TAGS)" | tr ',' ' ')
          if [[ "${{ needs.release.outputs.RELEASE_CREATED }}" == "true" ]]; then
            echo "Released - purge all build-metadata images"
            for tag in $tags; do
              if [[ "$tag" == "${{ needs.get-version.outputs.CORE_VERSION }}" ]] || [[ "$tag" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
                echo "Image tag to keep: $tag"
              else
                echo "Image tag to purge: $tag"
                gcloud artifacts docker tags delete $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:"$tag" --quiet
              fi
            done
          else
            echo "Non-released - preserve the latest commit image in main branch and purge all the others"
            for tag in $tags; do
              if [ "$tag" = "${{ needs.get-version.outputs.CORE_VERSION }}_${{ needs.get-version.outputs.GITHUB_SHA }}" ] || [ "$tag" = "${{ needs.get-version.outputs.CORE_VERSION }}" ]; then
                echo "Image tag to keep: $tag"
              else
                echo "Image tag to purge: $tag"
                gcloud artifacts docker tags delete $GAR_REGISTRY/$GAR_REPOSITORY/$GAR_IMAGE:"$tag" --quiet
              fi
            done
          fi
  # Only tag and upload OpenAPI spec at release
  release-public:
    runs-on: [self-hosted, on-prem, dgx]
    needs: release
    if: ${{ needs.release.outputs.RELEASE_CREATED }}
    steps:
      - name: Checkout (latest)
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history for git commands in below steps

      - name: Create public tag
        shell: bash
        run: |
          SHA_LAST_CHANGED=$(git --no-pager log -n 1 --pretty=format:%H -- version-public.txt)
          echo "Last version-public.txt changed occurred in: $SHA_LAST_CHANGED"
          DIFF=$(git --no-pager diff HEAD~1 -- CHANGELOG.md)
          if [ -n "$DIFF" ]
          then
              if [[ $DIFF =~ $SHA_LAST_CHANGED ]]
              then
                  echo "version-public.txt was changed in this release"
                  TAG=v$(cat version-public.txt)-public
                  git config user.name droplet-bot
                  git config user.email drop@instill.tech
                  git tag -a "$TAG" -m "Public release $TAG for code version ${{ needs.release.outputs.TAG_NAME }}"
                  git push origin "$TAG"
              else
                  echo "version-public.txt was not changed in this release"
              fi
          else
              echo "No changes recorded in CHANGELOG.md (no version was released)"
          fi
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.googleTerraformSaKey }} # vault-action does not support json output yet so we store this as an organization secret
          export_default_credentials: true

      - name: Upload openapi file to GCS bucket
        shell: bash
        run: |
          echo "Uploaded openapi_$TAG.yaml to GCS bucket"
          gsutil cp api/openapi.yaml gs://public-europe-west2-c-artifacts/docs/api/$OPENAPI_NAME/openapi_v$(cat version-public.txt).yaml
