/*
 * Model Server
 *
 * This is API spec of model server
 *
 * API version: 0.0.1
 * Contact: hello@instill.tech
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"

	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_zap "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
	grpc_recovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"

	"github.com/instill-ai/model-backend/configs"
	model "github.com/instill-ai/model-backend/internal-protogen-go/model"
	"github.com/instill-ai/model-backend/internal/triton"
	modelDB "github.com/instill-ai/model-backend/pkg/db"
	"github.com/instill-ai/model-backend/pkg/handlers"

	"go.uber.org/zap"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
)

func zapInterceptor() *zap.Logger {
	logger, err := zap.NewProduction()
	if err != nil {
		log.Fatalf("failed to initialize zap logger: %v", err)
	}
	grpc_zap.ReplaceGrpcLoggerV2(logger)
	return logger
}

// RecoveryInterceptor - panic handler
func recoveryInterceptor() grpc_recovery.Option {
	return grpc_recovery.WithRecoveryHandler(func(p interface{}) (err error) {
		return status.Errorf(codes.Unknown, "panic triggered: %v", p)
	})
}

func grpcHandlerFunc(grpcServer *grpc.Server, gwHandler http.Handler) http.Handler {
	return h2c.NewHandler(
		http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if r.ProtoMajor == 2 && strings.Contains(r.Header.Get("Content-Type"), "application/grpc") {
				grpcServer.ServeHTTP(w, r)
			} else {
				gwHandler.ServeHTTP(w, r)
			}
		}),
		&http2.Server{})
}

func CustomMatcher(key string) (string, bool) {
	if strings.HasPrefix(strings.ToLower(key), "jwt-") {
		return key, true
	}

	switch key {
	case "Request-Id":
		return key, true
	default:
		return runtime.DefaultHeaderMatcher(key)
	}
}

func main() {
	err := configs.Init()
	if err != nil {
		log.Fatal(err)
	}

	errSig := make(chan error)
	// Wait for interrupt signal to gracefully shutdown the server with a timeout of 5 seconds.
	quitSig := make(chan os.Signal, 1)

	modelDB.Init()

	triton.Init()

	// Create tls based credential.
	var creds credentials.TransportCredentials
	if configs.Config.Server.HTTPS.Enabled {
		creds, err = credentials.NewServerTLSFromFile(configs.Config.Server.HTTPS.Cert, configs.Config.Server.HTTPS.Key)
		if err != nil {
			log.Fatalf("failed to create credentials: %v", err)
		}
	}

	// Shared options for the logger, with a custom gRPC code to log level function.
	opts := []grpc_zap.Option{
		grpc_zap.WithDecider(func(fullMethodName string, err error) bool {
			// will not log gRPC calls if it was a call to healthcheck and no error was raised
			if err == nil && fullMethodName == "foo.bar.healthcheck" {
				return false
			}
			// by default everything will be logged
			return true
		}),
	}

	grpcServerOpts := []grpc.ServerOption{
		grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(
			grpc_zap.StreamServerInterceptor(zapInterceptor(), opts...),
			// grpc_recovery.StreamServerInterceptor(recoveryInterceptor()),
		)),
		grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(
			grpc_zap.UnaryServerInterceptor(zapInterceptor(), opts...),
			// grpc_recovery.UnaryServerInterceptor(recoveryInterceptor()),
		)),
	}
	if configs.Config.Server.HTTPS.Enabled {
		grpcServerOpts = append(grpcServerOpts, grpc.Creds(creds))
	}

	grpcS := grpc.NewServer(grpcServerOpts...)
	model.RegisterModelServer(grpcS, &handlers.ServiceHandlers{})

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	gwS := runtime.NewServeMux(
		runtime.WithIncomingHeaderMatcher(CustomMatcher),
		runtime.WithMarshalerOption(runtime.MIMEWildcard, &runtime.JSONPb{
			MarshalOptions: protojson.MarshalOptions{
				UseProtoNames: true,
			},
			UnmarshalOptions: protojson.UnmarshalOptions{
				DiscardUnknown: true,
			},
		}),
	)

	// Register custom route for  POST /models
	if err := gwS.HandlePath("POST", "/models", handlers.HandleUploadOutput); err != nil {
		panic(err)
	}

	var dialOpts []grpc.DialOption
	if configs.Config.Server.HTTPS.Enabled {
		dialOpts = []grpc.DialOption{grpc.WithTransportCredentials(creds)}
	} else {
		dialOpts = []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
	}

	if err := model.RegisterModelHandlerFromEndpoint(ctx, gwS, fmt.Sprintf(":%v", configs.Config.Server.Port), dialOpts); err != nil {
		log.Fatalln(err)
	}

	httpServer := &http.Server{
		Addr:    fmt.Sprintf(":%v", configs.Config.Server.Port),
		Handler: grpcHandlerFunc(grpcS, gwS),
	}

	if configs.Config.Server.HTTPS.Enabled {
		go func() {
			if err := httpServer.ListenAndServeTLS(configs.Config.Server.HTTPS.Cert, configs.Config.Server.HTTPS.Key); err != nil {
				errSig <- err
			}
		}()
	} else {
		go func() {
			if err := httpServer.ListenAndServe(); err != nil {
				errSig <- err
			}
		}()
	}
	log.Println("gRPC server is running.")

	// kill (no param) default send syscall.SIGTERM
	// kill -2 is syscall.SIGINT
	// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it
	signal.Notify(quitSig, syscall.SIGINT, syscall.SIGTERM)

	select {
	case err := <-errSig:
		log.Printf("Fatal error: %v\n", err)
	case <-quitSig:
	}

	log.Println("Shutting down server...")

	grpcS.GracefulStop()
	modelDB.Close()
	triton.Close()
}
