"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ModelMetadataRequest(google.protobuf.message.Message):
    """ModelMetadataRequest represents a request to get the model metadata"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """model id"""
    version: builtins.str
    """model tag verion"""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "version", b"version"]) -> None: ...

global___ModelMetadataRequest = ModelMetadataRequest

@typing_extensions.final
class InferTensor(google.protobuf.message.Message):
    """tensor for inference"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DATATYPE_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """tensor name."""
    datatype: builtins.str
    """tensor data type."""
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """tensor shape."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        datatype: builtins.str = ...,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["datatype", b"datatype", "name", b"name", "shape", b"shape"]) -> None: ...

global___InferTensor = InferTensor

@typing_extensions.final
class ModelMetadataResponse(google.protobuf.message.Message):
    """ModelMetadataResponse represents a response to get the model metadata"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class TensorMetadata(google.protobuf.message.Message):
        """metadata for a tensor"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        DATATYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        name: builtins.str
        """tensor name"""
        datatype: builtins.str
        """tensor data type"""
        @property
        def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """tensor shape"""
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            datatype: builtins.str = ...,
            shape: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["datatype", b"datatype", "name", b"name", "shape", b"shape"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    VERSIONS_FIELD_NUMBER: builtins.int
    FRAMEWORK_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """model name"""
    @property
    def versions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """model tag version"""
    framework: builtins.str
    """model inference framework"""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelMetadataResponse.TensorMetadata]:
        """model inputs"""
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelMetadataResponse.TensorMetadata]:
        """model outputs"""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        versions: collections.abc.Iterable[builtins.str] | None = ...,
        framework: builtins.str = ...,
        inputs: collections.abc.Iterable[global___ModelMetadataResponse.TensorMetadata] | None = ...,
        outputs: collections.abc.Iterable[global___ModelMetadataResponse.TensorMetadata] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["framework", b"framework", "inputs", b"inputs", "name", b"name", "outputs", b"outputs", "versions", b"versions"]) -> None: ...

global___ModelMetadataResponse = ModelMetadataResponse

@typing_extensions.final
class RayServiceCallRequest(google.protobuf.message.Message):
    """RayServiceCallRequest represents a request for model inference"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class InferRequestedOutputTensor(google.protobuf.message.Message):
        """An output tensor requested for an inference request."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        name: builtins.str
        """tensor name."""
        def __init__(
            self,
            *,
            name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["name", b"name"]) -> None: ...

    MODEL_NAME_FIELD_NUMBER: builtins.int
    MODEL_VERSION_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    RAW_INPUT_CONTENTS_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """name of the model to use for inferencing."""
    model_version: builtins.str
    """model tag version"""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InferTensor]:
        """input tensors for the inference."""
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RayServiceCallRequest.InferRequestedOutputTensor]:
        """The requested output tensors for the inference. Optional, if not
        specified all outputs specified in the model config will be
        returned.
        """
    @property
    def raw_input_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """raw input contents"""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        model_version: builtins.str = ...,
        inputs: collections.abc.Iterable[global___InferTensor] | None = ...,
        outputs: collections.abc.Iterable[global___RayServiceCallRequest.InferRequestedOutputTensor] | None = ...,
        raw_input_contents: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["inputs", b"inputs", "model_name", b"model_name", "model_version", b"model_version", "outputs", b"outputs", "raw_input_contents", b"raw_input_contents"]) -> None: ...

global___RayServiceCallRequest = RayServiceCallRequest

@typing_extensions.final
class RayServiceCallResponse(google.protobuf.message.Message):
    """RayServiceCallResponse represents a response for model inference"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    MODEL_VERSION_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    RAW_OUTPUT_CONTENTS_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """name of the model to use for inferencing."""
    model_version: builtins.str
    """model tag version"""
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InferTensor]:
        """output tensors"""
    @property
    def raw_output_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """raw output contents"""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        model_version: builtins.str = ...,
        outputs: collections.abc.Iterable[global___InferTensor] | None = ...,
        raw_output_contents: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["model_name", b"model_name", "model_version", b"model_version", "outputs", b"outputs", "raw_output_contents", b"raw_output_contents"]) -> None: ...

global___RayServiceCallResponse = RayServiceCallResponse
